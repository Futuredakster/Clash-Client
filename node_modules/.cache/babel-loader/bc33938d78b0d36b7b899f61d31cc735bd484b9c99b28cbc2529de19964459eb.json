{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StageCreator = exports.create = void 0;\nconst ordering_1 = require(\"../../ordering\");\nconst helpers = require(\"../../helpers\");\n/**\n * Creates a stage.\n *\n * @param this Instance of BracketsManager.\n * @param stage The stage to create.\n */\nasync function create(stage) {\n  const creator = new StageCreator(this.storage, stage);\n  return creator.run();\n}\nexports.create = create;\nclass StageCreator {\n  /**\n   * Creates an instance of StageCreator, which will handle the creation of the stage.\n   *\n   * @param storage The implementation of Storage.\n   * @param stage The stage to create.\n   */\n  constructor(storage, stage) {\n    this.storage = storage;\n    this.stage = stage;\n    this.stage.settings = this.stage.settings || {};\n    this.seedOrdering = [...(this.stage.settings.seedOrdering || [])];\n    this.updateMode = false;\n    this.enableByesInUpdate = false;\n    if (!this.stage.name) throw Error('You must provide a name for the stage.');\n    if (this.stage.tournamentId === undefined) throw Error('You must provide a tournament id for the stage.');\n    if (stage.type === 'round_robin') this.stage.settings.roundRobinMode = this.stage.settings.roundRobinMode || 'simple';\n    if (stage.type === 'single_elimination') this.stage.settings.consolationFinal = this.stage.settings.consolationFinal || false;\n    if (stage.type === 'double_elimination') this.stage.settings.grandFinal = this.stage.settings.grandFinal || 'none';\n    this.stage.settings.matchesChildCount = this.stage.settings.matchesChildCount || 0;\n  }\n  /**\n   * Run the creation process.\n   */\n  async run() {\n    let stage;\n    switch (this.stage.type) {\n      case 'round_robin':\n        stage = await this.roundRobin();\n        break;\n      case 'single_elimination':\n        stage = await this.singleElimination();\n        break;\n      case 'double_elimination':\n        stage = await this.doubleElimination();\n        break;\n      default:\n        throw Error('Unknown stage type.');\n    }\n    if (stage.id === -1) throw Error('Something went wrong when creating the stage.');\n    await this.ensureSeedOrdering(stage.id);\n    return stage;\n  }\n  /**\n   * Enables the update mode.\n   *\n   * @param stageId ID of the stage.\n   * @param enableByes Whether to use BYEs or TBDs for `null` values in an input seeding.\n   */\n  setExisting(stageId, enableByes) {\n    this.updateMode = true;\n    this.currentStageId = stageId;\n    this.enableByesInUpdate = enableByes;\n  }\n  /**\n   * Creates a round-robin stage.\n   *\n   * Group count must be given. It will distribute participants in groups and rounds.\n   */\n  async roundRobin() {\n    const groups = await this.getRoundRobinGroups();\n    const stage = await this.createStage();\n    for (let i = 0; i < groups.length; i++) await this.createRoundRobinGroup(stage.id, i + 1, groups[i]);\n    return stage;\n  }\n  /**\n   * Creates a single elimination stage.\n   *\n   * One bracket and optionally a consolation final between semi-final losers.\n   */\n  async singleElimination() {\n    var _a, _b;\n    if (Array.isArray((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.seedOrdering) && ((_b = this.stage.settings) === null || _b === void 0 ? void 0 : _b.seedOrdering.length) !== 1) throw Error('You must specify one seed ordering method.');\n    const slots = await this.getSlots();\n    const stage = await this.createStage();\n    const method = this.getStandardBracketFirstRoundOrdering();\n    const ordered = ordering_1.ordering[method](slots);\n    const {\n      losers\n    } = await this.createStandardBracket(stage.id, 1, ordered);\n    await this.createConsolationFinal(stage.id, losers);\n    return stage;\n  }\n  /**\n   * Creates a double elimination stage.\n   *\n   * One upper bracket (winner bracket, WB), one lower bracket (loser bracket, LB) and optionally a grand final\n   * between the winner of both bracket, which can be simple or double.\n   */\n  async doubleElimination() {\n    var _a;\n    if (this.stage.settings && Array.isArray(this.stage.settings.seedOrdering) && this.stage.settings.seedOrdering.length < 1) throw Error('You must specify at least one seed ordering method.');\n    const slots = await this.getSlots();\n    const stage = await this.createStage();\n    const method = this.getStandardBracketFirstRoundOrdering();\n    const ordered = ordering_1.ordering[method](slots);\n    if ((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.skipFirstRound) await this.createDoubleEliminationSkipFirstRound(stage.id, ordered);else await this.createDoubleElimination(stage.id, ordered);\n    return stage;\n  }\n  /**\n   * Creates a double elimination stage with skip first round option.\n   *\n   * @param stageId ID of the stage.\n   * @param slots A list of slots.\n   */\n  async createDoubleEliminationSkipFirstRound(stageId, slots) {\n    var _a;\n    const {\n      even: directInWb,\n      odd: directInLb\n    } = helpers.splitByParity(slots);\n    const {\n      losers: losersWb,\n      winner: winnerWb\n    } = await this.createStandardBracket(stageId, 1, directInWb);\n    if (helpers.isDoubleEliminationNecessary((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.size)) {\n      const winnerLb = await this.createLowerBracket(stageId, 2, [directInLb, ...losersWb]);\n      await this.createGrandFinal(stageId, winnerWb, winnerLb);\n    }\n  }\n  /**\n   * Creates a double elimination stage.\n   *\n   * @param stageId ID of the stage.\n   * @param slots A list of slots.\n   */\n  async createDoubleElimination(stageId, slots) {\n    var _a;\n    const {\n      losers: losersWb,\n      winner: winnerWb\n    } = await this.createStandardBracket(stageId, 1, slots);\n    if (helpers.isDoubleEliminationNecessary((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.size)) {\n      const winnerLb = await this.createLowerBracket(stageId, 2, losersWb);\n      const finalGroupId = await this.createGrandFinal(stageId, winnerWb, winnerLb);\n      await this.createConsolationFinal(stageId, losersWb, {\n        existingGroupId: finalGroupId,\n        // Arbitrary way to differentiate the grand final and consolation final matches.\n        // Grand final matches always have had `number: 1`. Now, consolation final matches always have `number: 2`.\n        matchNumberStart: 2\n      });\n    }\n  }\n  /**\n   * Creates a round-robin group.\n   *\n   * This will make as many rounds as needed to let each participant match every other once.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupNumber Number of the group in the stage.\n   * @param slots A list of slots.\n   */\n  async createRoundRobinGroup(stageId, groupNumber, slots) {\n    var _a;\n    const groupId = await this.insertGroup({\n      stage_id: stageId,\n      number: groupNumber\n    });\n    if (groupId === -1) throw Error('Could not insert the group.');\n    const rounds = helpers.makeRoundRobinMatches(slots, (_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.roundRobinMode);\n    for (let i = 0; i < rounds.length; i++) await this.createRound(stageId, groupId, i + 1, rounds[0].length, rounds[i]);\n  }\n  /**\n   * Creates a standard bracket, which is the only one in single elimination and the upper one in double elimination.\n   *\n   * This will make as many rounds as needed to end with one winner.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupNumber Number of the group in the stage.\n   * @param slots A list of slots.\n   */\n  async createStandardBracket(stageId, groupNumber, slots) {\n    const roundCount = helpers.getUpperBracketRoundCount(slots.length);\n    const groupId = await this.insertGroup({\n      stage_id: stageId,\n      number: groupNumber\n    });\n    if (groupId === -1) throw Error('Could not insert the group.');\n    let duels = helpers.makePairs(slots);\n    let roundNumber = 1;\n    const losers = [];\n    for (let i = roundCount - 1; i >= 0; i--) {\n      const matchCount = Math.pow(2, i);\n      duels = this.getCurrentDuels(duels, matchCount);\n      losers.push(duels.map(helpers.byeLoser));\n      await this.createRound(stageId, groupId, roundNumber++, matchCount, duels);\n    }\n    return {\n      losers,\n      winner: helpers.byeWinner(duels[0])\n    };\n  }\n  /**\n   * Creates a lower bracket, alternating between major and minor rounds.\n   *\n   * - A major round is a regular round.\n   * - A minor round matches the previous (major) round's winners against upper bracket losers of the corresponding round.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupNumber Number of the group in the stage.\n   * @param losers One list of losers per upper bracket round.\n   */\n  async createLowerBracket(stageId, groupNumber, losers) {\n    var _a;\n    const participantCount = (_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.size;\n    const roundPairCount = helpers.getRoundPairCount(participantCount);\n    let losersId = 0;\n    const method = this.getMajorOrdering(participantCount);\n    const ordered = ordering_1.ordering[method](losers[losersId++]);\n    const groupId = await this.insertGroup({\n      stage_id: stageId,\n      number: groupNumber\n    });\n    if (groupId === -1) throw Error('Could not insert the group.');\n    let duels = helpers.makePairs(ordered);\n    let roundNumber = 1;\n    for (let i = 0; i < roundPairCount; i++) {\n      const matchCount = Math.pow(2, roundPairCount - i - 1);\n      // Major round.\n      duels = this.getCurrentDuels(duels, matchCount, true);\n      await this.createRound(stageId, groupId, roundNumber++, matchCount, duels);\n      // Minor round.\n      const minorOrdering = this.getMinorOrdering(participantCount, i, roundPairCount);\n      duels = this.getCurrentDuels(duels, matchCount, false, losers[losersId++], minorOrdering);\n      await this.createRound(stageId, groupId, roundNumber++, matchCount, duels);\n    }\n    return helpers.byeWinnerToGrandFinal(duels[0]);\n  }\n  /**\n   * Creates a bracket with rounds that only have 1 match each. Used for finals.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupNumber Number of the group in the stage.\n   * @param duels A list of duels.\n   * @param overrides Optional overrides.\n   */\n  async createUniqueMatchBracket(stageId, groupNumber, duels, overrides = {}) {\n    let groupId = overrides.existingGroupId;\n    let roundNumberStart = 1;\n    if (groupId !== undefined) {\n      const rounds = await this.storage.select('round', {\n        group_id: groupId\n      });\n      if (!rounds) throw Error('Error getting rounds.');\n      // When we add rounds to an existing group, we resume the round numbering.\n      roundNumberStart = rounds.length + 1;\n    } else {\n      groupId = await this.insertGroup({\n        stage_id: stageId,\n        number: groupNumber\n      });\n      if (groupId === -1) throw Error('Could not insert the group.');\n    }\n    for (let i = 0; i < duels.length; i++) await this.createRound(stageId, groupId, roundNumberStart + i, 1, [duels[i]], overrides.matchNumberStart);\n    return groupId;\n  }\n  /**\n   * Creates a round, which contain matches.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupId ID of the parent group.\n   * @param roundNumber Number in the group.\n   * @param matchCount Duel/match count.\n   * @param duels A list of duels.\n   * @param matchNumberStart Optionally give the starting point for the match numbers. Starts at 1 by default.\n   */\n  async createRound(stageId, groupId, roundNumber, matchCount, duels, matchNumberStart = 1) {\n    const matchesChildCount = this.getMatchesChildCount();\n    const roundId = await this.insertRound({\n      number: roundNumber,\n      stage_id: stageId,\n      group_id: groupId\n    });\n    if (roundId === -1) throw Error('Could not insert the round.');\n    for (let i = 0; i < matchCount; i++) await this.createMatch(stageId, groupId, roundId, matchNumberStart + i, duels[i], matchesChildCount);\n  }\n  /**\n   * Creates a match, possibly with match games.\n   *\n   * - If `childCount` is 0, then there is no children. The score of the match is directly its intrinsic score.\n   * - If `childCount` is greater than 0, then the score of the match will automatically be calculated based on its child games.\n   *\n   * @param stageId ID of the parent stage.\n   * @param groupId ID of the parent group.\n   * @param roundId ID of the parent round.\n   * @param matchNumber Number in the round.\n   * @param opponents The two opponents matching against each other.\n   * @param childCount Child count for this match (number of games).\n   */\n  async createMatch(stageId, groupId, roundId, matchNumber, opponents, childCount) {\n    const opponent1 = helpers.toResultWithPosition(opponents[0]);\n    const opponent2 = helpers.toResultWithPosition(opponents[1]);\n    // Round-robin matches can easily be removed. Prevent BYE vs. BYE matches.\n    if (this.stage.type === 'round_robin' && opponent1 === null && opponent2 === null) return;\n    let existing = null;\n    let status = helpers.getMatchStatus(opponents);\n    if (this.updateMode) {\n      existing = await this.storage.selectFirst('match', {\n        round_id: roundId,\n        number: matchNumber\n      });\n      const currentChildCount = existing === null || existing === void 0 ? void 0 : existing.child_count;\n      childCount = currentChildCount === undefined ? childCount : currentChildCount;\n      if (existing) {\n        // Keep the most advanced status when updating a match.\n        const existingStatus = helpers.getMatchStatus(existing);\n        if (existingStatus > status) status = existingStatus;\n      }\n    }\n    const parentId = await this.insertMatch({\n      number: matchNumber,\n      stage_id: stageId,\n      group_id: groupId,\n      round_id: roundId,\n      child_count: childCount,\n      status: status,\n      ...helpers.getInferredResult(opponent1, opponent2)\n    }, existing);\n    if (parentId === -1) throw Error('Could not insert the match.');\n    for (let i = 0; i < childCount; i++) {\n      const id = await this.insertMatchGame({\n        number: i + 1,\n        stage_id: stageId,\n        parent_id: parentId,\n        status: status,\n        ...helpers.getInferredResult(helpers.toResult(opponents[0]), helpers.toResult(opponents[1]))\n      });\n      if (id === -1) throw Error('Could not insert the match game.');\n    }\n  }\n  /**\n   * Generic implementation.\n   *\n   * @param previousDuels Always given.\n   * @param currentDuelCount Always given.\n   * @param major Only for loser bracket.\n   * @param losers Only for minor rounds of loser bracket.\n   * @param method Only for minor rounds. Ordering method for the losers.\n   */\n  getCurrentDuels(previousDuels, currentDuelCount, major, losers, method) {\n    if ((major === undefined || major) && previousDuels.length === currentDuelCount) {\n      // First round.\n      return previousDuels;\n    }\n    if (major === undefined || major) {\n      // From major to major (WB) or minor to major (LB).\n      return helpers.transitionToMajor(previousDuels);\n    }\n    // From major to minor (LB).\n    // Losers and method won't be undefined.\n    return helpers.transitionToMinor(previousDuels, losers, method);\n  }\n  /**\n   * Returns a list of slots.\n   * - If `seeding` was given, inserts them in the storage.\n   * - If `size` was given, only returns a list of empty slots.\n   *\n   * @param positions An optional list of positions (seeds) for a manual ordering.\n   */\n  async getSlots(positions) {\n    var _a;\n    let seeding = this.stage.seedingIds || this.stage.seeding;\n    const size = ((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.size) || (seeding === null || seeding === void 0 ? void 0 : seeding.length) || 0;\n    helpers.ensureValidSize(this.stage.type, size);\n    if (size && !seeding) return Array.from({\n      length: size\n    }, (_, i) => ({\n      id: null,\n      position: i + 1\n    }));\n    if (!seeding) throw Error('Either size or seeding must be given.');\n    this.stage.settings = {\n      ...this.stage.settings,\n      size // Always set the size.\n    };\n    helpers.ensureNoDuplicates(seeding);\n    seeding = helpers.fixSeeding(seeding, size);\n    if (this.stage.type !== 'round_robin' && this.stage.settings.balanceByes) seeding = helpers.balanceByes(seeding, this.stage.settings.size);\n    this.stage.seeding = seeding;\n    if (this.stage.seedingIds !== undefined || helpers.isSeedingWithIds(seeding)) return this.getSlotsUsingIds(seeding, positions);\n    return this.getSlotsUsingNames(seeding, positions);\n  }\n  /**\n   * Returns the list of slots with a seeding containing names. Participants may be added to database.\n   *\n   * @param seeding The seeding (names).\n   * @param positions An optional list of positions (seeds) for a manual ordering.\n   */\n  async getSlotsUsingNames(seeding, positions) {\n    const participants = helpers.extractParticipantsFromSeeding(this.stage.tournamentId, seeding);\n    if (!(await this.registerParticipants(participants))) throw Error('Error registering the participants.');\n    // Get participants back with IDs.\n    const added = await this.storage.select('participant', {\n      tournament_id: this.stage.tournamentId\n    });\n    if (!added) throw Error('Error getting registered participant.');\n    return helpers.mapParticipantsNamesToDatabase(seeding, added, positions);\n  }\n  /**\n   * Returns the list of slots with a seeding containing IDs. No database mutation.\n   *\n   * @param seeding The seeding (IDs).\n   * @param positions An optional list of positions (seeds) for a manual ordering.\n   */\n  async getSlotsUsingIds(seeding, positions) {\n    const participants = await this.storage.select('participant', {\n      tournament_id: this.stage.tournamentId\n    });\n    if (!participants) throw Error('No available participants.');\n    return helpers.mapParticipantsIdsToDatabase(seeding, participants, positions);\n  }\n  /**\n   * Gets the current stage number based on existing stages.\n   */\n  async getStageNumber() {\n    const stages = await this.storage.select('stage', {\n      tournament_id: this.stage.tournamentId\n    });\n    const stageNumbers = stages === null || stages === void 0 ? void 0 : stages.map(stage => {\n      var _a;\n      return (_a = stage.number) !== null && _a !== void 0 ? _a : 0;\n    });\n    if (this.stage.number !== undefined) {\n      if (stageNumbers === null || stageNumbers === void 0 ? void 0 : stageNumbers.includes(this.stage.number)) throw Error('The given stage number already exists.');\n      return this.stage.number;\n    }\n    if (!(stageNumbers === null || stageNumbers === void 0 ? void 0 : stageNumbers.length)) return 1;\n    const maxNumber = Math.max(...stageNumbers);\n    return maxNumber + 1;\n  }\n  /**\n   * Safely gets `matchesChildCount` in the stage input settings.\n   */\n  getMatchesChildCount() {\n    var _a;\n    if (!((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.matchesChildCount)) return 0;\n    return this.stage.settings.matchesChildCount;\n  }\n  /**\n   * Safely gets an ordering by its index in the stage input settings.\n   *\n   * @param orderingIndex Index of the ordering.\n   * @param stageType A value indicating if the method should be a group method or not.\n   * @param defaultMethod The default method to use if not given.\n   */\n  getOrdering(orderingIndex, stageType, defaultMethod) {\n    var _a;\n    if (!((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.seedOrdering)) {\n      this.seedOrdering.push(defaultMethod);\n      return defaultMethod;\n    }\n    const method = this.stage.settings.seedOrdering[orderingIndex];\n    if (!method) {\n      this.seedOrdering.push(defaultMethod);\n      return defaultMethod;\n    }\n    if (stageType === 'elimination' && method.match(/^groups\\./)) throw Error('You must specify a seed ordering method without a \\'groups\\' prefix');\n    if (stageType === 'groups' && method !== 'natural' && !method.match(/^groups\\./)) throw Error('You must specify a seed ordering method with a \\'groups\\' prefix');\n    return method;\n  }\n  /**\n   * Gets the duels in groups for a round-robin stage.\n   */\n  async getRoundRobinGroups() {\n    var _a, _b, _c, _d, _e;\n    if (((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.groupCount) === undefined || !Number.isInteger(this.stage.settings.groupCount)) throw Error('You must specify a group count for round-robin stages.');\n    if (this.stage.settings.groupCount <= 0) throw Error('You must provide a strictly positive group count.');\n    if ((_b = this.stage.settings) === null || _b === void 0 ? void 0 : _b.manualOrdering) {\n      if (((_c = this.stage.settings) === null || _c === void 0 ? void 0 : _c.manualOrdering.length) !== ((_d = this.stage.settings) === null || _d === void 0 ? void 0 : _d.groupCount)) throw Error('Group count in the manual ordering does not correspond to the given group count.');\n      const positions = (_e = this.stage.settings) === null || _e === void 0 ? void 0 : _e.manualOrdering.flat();\n      const slots = await this.getSlots(positions);\n      return helpers.makeGroups(slots, this.stage.settings.groupCount);\n    }\n    if (Array.isArray(this.stage.settings.seedOrdering) && this.stage.settings.seedOrdering.length !== 1) throw Error('You must specify one seed ordering method.');\n    const method = this.getRoundRobinOrdering();\n    const slots = await this.getSlots();\n    const ordered = ordering_1.ordering[method](slots, this.stage.settings.groupCount);\n    return helpers.makeGroups(ordered, this.stage.settings.groupCount);\n  }\n  /**\n   * Returns the ordering method for the groups in a round-robin stage.\n   */\n  getRoundRobinOrdering() {\n    return this.getOrdering(0, 'groups', 'groups.effort_balanced');\n  }\n  /**\n   * Returns the ordering method for the first round of the upper bracket of an elimination stage.\n   */\n  getStandardBracketFirstRoundOrdering() {\n    return this.getOrdering(0, 'elimination', 'inner_outer');\n  }\n  /**\n   * Safely gets the only major ordering for the lower bracket.\n   *\n   * @param participantCount Number of participants in the stage.\n   */\n  getMajorOrdering(participantCount) {\n    var _a;\n    return this.getOrdering(1, 'elimination', ((_a = ordering_1.defaultMinorOrdering[participantCount]) === null || _a === void 0 ? void 0 : _a[0]) || 'natural');\n  }\n  /**\n   * Safely gets a minor ordering for the lower bracket by its index.\n   *\n   * @param participantCount Number of participants in the stage.\n   * @param index Index of the minor round.\n   * @param minorRoundCount Number of minor rounds.\n   */\n  getMinorOrdering(participantCount, index, minorRoundCount) {\n    var _a;\n    // No ordering for the last minor round. There is only one participant to order.\n    if (index === minorRoundCount - 1) return undefined;\n    return this.getOrdering(2 + index, 'elimination', ((_a = ordering_1.defaultMinorOrdering[participantCount]) === null || _a === void 0 ? void 0 : _a[1 + index]) || 'natural');\n  }\n  /**\n   * Inserts a stage or finds an existing one.\n   *\n   * @param stage The stage to insert.\n   */\n  async insertStage(stage) {\n    let existing = null;\n    if (this.updateMode) {\n      existing = await this.storage.select('stage', this.currentStageId);\n      if (!existing) throw Error('Stage not found.');\n      const update = {\n        ...existing,\n        ...stage,\n        settings: {\n          ...existing.settings,\n          ...stage.settings\n        }\n      };\n      if (!(await this.storage.update('stage', this.currentStageId, update))) throw Error('Could not update the stage.');\n    }\n    if (!existing) return this.storage.insert('stage', stage);\n    return existing.id;\n  }\n  /**\n   * Inserts a group or finds an existing one.\n   *\n   * @param group The group to insert.\n   */\n  async insertGroup(group) {\n    let existing = null;\n    if (this.updateMode) {\n      existing = await this.storage.selectFirst('group', {\n        stage_id: group.stage_id,\n        number: group.number\n      });\n    }\n    if (!existing) return this.storage.insert('group', group);\n    return existing.id;\n  }\n  /**\n   * Inserts a round or finds an existing one.\n   *\n   * @param round The round to insert.\n   */\n  async insertRound(round) {\n    let existing = null;\n    if (this.updateMode) {\n      existing = await this.storage.selectFirst('round', {\n        group_id: round.group_id,\n        number: round.number\n      });\n    }\n    if (!existing) return this.storage.insert('round', round);\n    return existing.id;\n  }\n  /**\n   * Inserts a match or updates an existing one.\n   *\n   * @param match The match to insert.\n   * @param existing An existing match corresponding to the current one.\n   */\n  async insertMatch(match, existing) {\n    if (!existing) return this.storage.insert('match', match);\n    const updated = helpers.getUpdatedMatchResults(match, existing, this.enableByesInUpdate);\n    if (!(await this.storage.update('match', existing.id, updated))) throw Error('Could not update the match.');\n    return existing.id;\n  }\n  /**\n   * Inserts a match game or finds an existing one (and updates it).\n   *\n   * @param matchGame The match game to insert.\n   */\n  async insertMatchGame(matchGame) {\n    let existing = null;\n    if (this.updateMode) {\n      existing = await this.storage.selectFirst('match_game', {\n        parent_id: matchGame.parent_id,\n        number: matchGame.number\n      });\n    }\n    if (!existing) return this.storage.insert('match_game', matchGame);\n    const updated = helpers.getUpdatedMatchResults(matchGame, existing, this.enableByesInUpdate);\n    if (!(await this.storage.update('match_game', existing.id, updated))) throw Error('Could not update the match game.');\n    return existing.id;\n  }\n  /**\n   * Inserts missing participants.\n   *\n   * @param participants The list of participants to process.\n   */\n  async registerParticipants(participants) {\n    const existing = await this.storage.select('participant', {\n      tournament_id: this.stage.tournamentId\n    });\n    // Insert all if nothing.\n    if (!existing || existing.length === 0) return this.storage.insert('participant', participants);\n    // Insert only missing otherwise.\n    for (const participant of participants) {\n      if (existing.some(value => value.name === participant.name)) continue;\n      const result = await this.storage.insert('participant', participant);\n      if (result === -1) return false;\n    }\n    return true;\n  }\n  /**\n   * Creates a new stage.\n   */\n  async createStage() {\n    const stageNumber = await this.getStageNumber();\n    const stage = {\n      tournament_id: this.stage.tournamentId,\n      name: this.stage.name,\n      type: this.stage.type,\n      number: stageNumber,\n      settings: this.stage.settings || {}\n    };\n    const stageId = await this.insertStage(stage);\n    if (stageId === -1) throw Error('Could not insert the stage.');\n    return {\n      ...stage,\n      id: stageId\n    };\n  }\n  /**\n   * Creates a consolation final for the semi final losers of an upper bracket (single or double elimination).\n   *\n   * @param stageId ID of the stage.\n   * @param losers The semi final losers who will play the consolation final.\n   * @param overrides Optional overrides.\n   */\n  async createConsolationFinal(stageId, losers, overrides = {}) {\n    var _a;\n    if (!((_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.consolationFinal)) return;\n    const semiFinalLosers = losers[losers.length - 2];\n    await this.createUniqueMatchBracket(stageId, 2, [semiFinalLosers], overrides);\n  }\n  /**\n   * Creates a grand final (none, simple or double) for winners of both bracket in a double elimination stage.\n   *\n   * @param stageId ID of the stage.\n   * @param winnerWb The winner of the winner bracket.\n   * @param winnerLb The winner of the loser bracket.\n   */\n  async createGrandFinal(stageId, winnerWb, winnerLb) {\n    var _a;\n    // No Grand Final by default.\n    const grandFinal = (_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.grandFinal;\n    if (grandFinal === 'none') return;\n    // One duel by default.\n    const finalDuels = [[winnerWb, winnerLb]];\n    // Second duel.\n    if (grandFinal === 'double') finalDuels.push([{\n      id: null\n    }, {\n      id: null\n    }]);\n    const groupId = await this.createUniqueMatchBracket(stageId, 3, finalDuels);\n    return groupId;\n  }\n  /**\n   * Ensures that the seed ordering list is stored even if it was not given in the first place.\n   *\n   * @param stageId ID of the stage.\n   */\n  async ensureSeedOrdering(stageId) {\n    var _a, _b;\n    if (((_b = (_a = this.stage.settings) === null || _a === void 0 ? void 0 : _a.seedOrdering) === null || _b === void 0 ? void 0 : _b.length) === this.seedOrdering.length) return;\n    const existing = await this.storage.select('stage', stageId);\n    if (!existing) throw Error('Stage not found.');\n    const update = {\n      ...existing,\n      settings: {\n        ...existing.settings,\n        seedOrdering: this.seedOrdering\n      }\n    };\n    if (!(await this.storage.update('stage', stageId, update))) throw Error('Could not update the stage.');\n  }\n}\nexports.StageCreator = StageCreator;","map":{"version":3,"names":["ordering_1","require","helpers","create","stage","creator","StageCreator","storage","run","exports","constructor","settings","seedOrdering","updateMode","enableByesInUpdate","name","Error","tournamentId","undefined","type","roundRobinMode","consolationFinal","grandFinal","matchesChildCount","roundRobin","singleElimination","doubleElimination","id","ensureSeedOrdering","setExisting","stageId","enableByes","currentStageId","groups","getRoundRobinGroups","createStage","i","length","createRoundRobinGroup","Array","isArray","_a","_b","slots","getSlots","method","getStandardBracketFirstRoundOrdering","ordered","ordering","losers","createStandardBracket","createConsolationFinal","skipFirstRound","createDoubleEliminationSkipFirstRound","createDoubleElimination","even","directInWb","odd","directInLb","splitByParity","losersWb","winner","winnerWb","isDoubleEliminationNecessary","size","winnerLb","createLowerBracket","createGrandFinal","finalGroupId","existingGroupId","matchNumberStart","groupNumber","groupId","insertGroup","stage_id","number","rounds","makeRoundRobinMatches","createRound","roundCount","getUpperBracketRoundCount","duels","makePairs","roundNumber","matchCount","Math","pow","getCurrentDuels","push","map","byeLoser","byeWinner","participantCount","roundPairCount","getRoundPairCount","losersId","getMajorOrdering","minorOrdering","getMinorOrdering","byeWinnerToGrandFinal","createUniqueMatchBracket","overrides","roundNumberStart","select","group_id","getMatchesChildCount","roundId","insertRound","createMatch","matchNumber","opponents","childCount","opponent1","toResultWithPosition","opponent2","existing","status","getMatchStatus","selectFirst","round_id","currentChildCount","child_count","existingStatus","parentId","insertMatch","getInferredResult","insertMatchGame","parent_id","toResult","previousDuels","currentDuelCount","major","transitionToMajor","transitionToMinor","positions","seeding","seedingIds","ensureValidSize","from","_","position","ensureNoDuplicates","fixSeeding","balanceByes","isSeedingWithIds","getSlotsUsingIds","getSlotsUsingNames","participants","extractParticipantsFromSeeding","registerParticipants","added","tournament_id","mapParticipantsNamesToDatabase","mapParticipantsIdsToDatabase","getStageNumber","stages","stageNumbers","includes","maxNumber","max","getOrdering","orderingIndex","stageType","defaultMethod","match","groupCount","Number","isInteger","manualOrdering","_c","_d","_e","flat","makeGroups","getRoundRobinOrdering","defaultMinorOrdering","index","minorRoundCount","insertStage","update","insert","group","round","updated","getUpdatedMatchResults","matchGame","participant","some","value","result","stageNumber","semiFinalLosers","finalDuels"],"sources":["../../../src/base/stage/creator.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}