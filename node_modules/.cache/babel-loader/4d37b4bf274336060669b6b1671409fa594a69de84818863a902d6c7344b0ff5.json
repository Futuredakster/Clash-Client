{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Find = void 0;\nconst getter_1 = require(\"./base/getter\");\nconst helpers = require(\"./helpers\");\nclass Find extends getter_1.BaseGetter {\n  /**\n   * Gets the upper bracket (the only bracket if single elimination or the winner bracket in double elimination).\n   *\n   * @param stageId ID of the stage.\n   */\n  async upperBracket(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    switch (stage.type) {\n      case 'round_robin':\n        throw Error('Round-robin stages do not have an upper bracket.');\n      case 'single_elimination':\n      case 'double_elimination':\n        return this.getUpperBracket(stageId);\n      default:\n        throw Error('Unknown stage type.');\n    }\n  }\n  /**\n   * Gets the loser bracket.\n   *\n   * @param stageId ID of the stage.\n   */\n  async loserBracket(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    switch (stage.type) {\n      case 'round_robin':\n        throw Error('Round-robin stages do not have a loser bracket.');\n      case 'single_elimination':\n        throw Error('Single elimination stages do not have a loser bracket.');\n      case 'double_elimination':\n        const group = await this.getLoserBracket(stageId);\n        if (!group) throw Error('Loser bracket not found.');\n        return group;\n      default:\n        throw Error('Unknown stage type.');\n    }\n  }\n  /**\n   * Returns the matches leading to the given match.\n   *\n   * If a `participantId` is given, the previous match _from their point of view_ is returned.\n   *\n   * @param matchId ID of the target match.\n   * @param participantId Optional ID of the participant.\n   */\n  async previousMatches(matchId, participantId) {\n    const match = await this.storage.select('match', matchId);\n    if (!match) throw Error('Match not found.');\n    const stage = await this.storage.select('stage', match.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    const group = await this.storage.select('group', match.group_id);\n    if (!group) throw Error('Group not found.');\n    const round = await this.storage.select('round', match.round_id);\n    if (!round) throw Error('Round not found.');\n    const matchLocation = helpers.getMatchLocation(stage.type, group.number);\n    const previousMatches = await this.getPreviousMatches(match, matchLocation, stage, round.number);\n    if (participantId !== undefined) return previousMatches.filter(m => helpers.isParticipantInMatch(m, participantId));\n    return previousMatches;\n  }\n  /**\n   * Returns the matches following the given match.\n   *\n   * If a `participantId` is given:\n   * - If the participant won, the next match _from their point of view_ is returned.\n   * - If the participant is eliminated, no match is returned.\n   *\n   * @param matchId ID of the target match.\n   * @param participantId Optional ID of the participant.\n   */\n  async nextMatches(matchId, participantId) {\n    const match = await this.storage.select('match', matchId);\n    if (!match) throw Error('Match not found.');\n    const stage = await this.storage.select('stage', match.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    const group = await this.storage.select('group', match.group_id);\n    if (!group) throw Error('Group not found.');\n    const {\n      roundNumber,\n      roundCount\n    } = await this.getRoundPositionalInfo(match.round_id);\n    const matchLocation = helpers.getMatchLocation(stage.type, group.number);\n    const nextMatches = helpers.getNonNull(await this.getNextMatches(match, matchLocation, stage, roundNumber, roundCount));\n    if (participantId !== undefined) {\n      if (!helpers.isParticipantInMatch(match, participantId)) throw Error('The participant does not belong to this match.');\n      if (!helpers.isMatchStale(match)) throw Error('The match is not stale yet, so it is not possible to conclude the next matches for this participant.');\n      const loser = helpers.getLoser(match);\n      if (stage.type === 'single_elimination' && (loser === null || loser === void 0 ? void 0 : loser.id) === participantId) return []; // Eliminated.\n      if (stage.type === 'double_elimination') {\n        // TODO: refactor `getNextMatches()` to return 1 next match per group. Then we can get rid of `getMatchesByGroupDoubleElimination()`.\n        const {\n          winnerBracketMatch,\n          loserBracketMatch,\n          finalGroupMatch\n        } = await this.getMatchesByGroupDoubleElimination(nextMatches, new Map([[group.id, group]]));\n        const winner = helpers.getWinner(match);\n        if (matchLocation === 'loser_bracket') {\n          if (participantId === (loser === null || loser === void 0 ? void 0 : loser.id)) return []; // Eliminated from lower bracket.\n          if (participantId === (winner === null || winner === void 0 ? void 0 : winner.id)) return loserBracketMatch ? [loserBracketMatch] : [];\n        } else if (matchLocation === 'winner_bracket') {\n          if (!loserBracketMatch) throw Error('All matches of winner bracket should lead to loser bracket.');\n          if (participantId === (loser === null || loser === void 0 ? void 0 : loser.id)) return [loserBracketMatch]; // Eliminated from upper bracket, going to lower bracket.\n          if (participantId === (winner === null || winner === void 0 ? void 0 : winner.id)) return winnerBracketMatch ? [winnerBracketMatch] : [];\n        } else if (matchLocation === 'final_group') {\n          if (!finalGroupMatch) throw Error('All matches of a final group should also lead to the final group.');\n          return [finalGroupMatch];\n        }\n      }\n    }\n    return nextMatches;\n  }\n  /**\n   * Finds a match in a given group. The match must have the given number in a round of which the number in group is given.\n   *\n   * **Example:** In group of id 1, give me the 4th match in the 3rd round.\n   *\n   * @param groupId ID of the group.\n   * @param roundNumber Number of the round in its parent group.\n   * @param matchNumber Number of the match in its parent round.\n   */\n  async match(groupId, roundNumber, matchNumber) {\n    return this.findMatch(groupId, roundNumber, matchNumber);\n  }\n  /**\n   * Finds a match game based on its `id` or based on the combination of its `parent_id` and `number`.\n   *\n   * @param game Values to change in a match game.\n   */\n  async matchGame(game) {\n    return this.findMatchGame(game);\n  }\n  /**\n   * Returns an object with 1 match per group type. Only supports double elimination.\n   *\n   * @param matches A list of matches.\n   * @param fetchedGroups A map of groups which were already fetched.\n   */\n  async getMatchesByGroupDoubleElimination(matches, fetchedGroups) {\n    var _a, _b, _c;\n    const getGroup = async groupId => {\n      const existing = fetchedGroups.get(groupId);\n      if (existing) return existing;\n      const group = await this.storage.select('group', groupId);\n      if (!group) throw Error('Group not found.');\n      fetchedGroups.set(groupId, group);\n      return group;\n    };\n    let matchByGroupType = {};\n    for (const match of matches) {\n      const group = await getGroup(match.group_id);\n      matchByGroupType = {\n        winnerBracketMatch: (_a = matchByGroupType['winnerBracketMatch']) !== null && _a !== void 0 ? _a : helpers.isWinnerBracket('double_elimination', group.number) ? match : undefined,\n        loserBracketMatch: (_b = matchByGroupType['loserBracketMatch']) !== null && _b !== void 0 ? _b : helpers.isLoserBracket('double_elimination', group.number) ? match : undefined,\n        finalGroupMatch: (_c = matchByGroupType['finalGroupMatch']) !== null && _c !== void 0 ? _c : helpers.isFinalGroup('double_elimination', group.number) ? match : undefined\n      };\n    }\n    return matchByGroupType;\n  }\n}\nexports.Find = Find;","map":{"version":3,"names":["getter_1","require","helpers","Find","BaseGetter","upperBracket","stageId","stage","storage","select","Error","type","getUpperBracket","loserBracket","group","getLoserBracket","previousMatches","matchId","participantId","match","stage_id","group_id","round","round_id","matchLocation","getMatchLocation","number","getPreviousMatches","undefined","filter","m","isParticipantInMatch","nextMatches","roundNumber","roundCount","getRoundPositionalInfo","getNonNull","getNextMatches","isMatchStale","loser","getLoser","id","winnerBracketMatch","loserBracketMatch","finalGroupMatch","getMatchesByGroupDoubleElimination","Map","winner","getWinner","groupId","matchNumber","findMatch","matchGame","game","findMatchGame","matches","fetchedGroups","getGroup","existing","get","set","matchByGroupType","_a","isWinnerBracket","_b","isLoserBracket","_c","isFinalGroup","exports"],"sources":["../src/find.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}