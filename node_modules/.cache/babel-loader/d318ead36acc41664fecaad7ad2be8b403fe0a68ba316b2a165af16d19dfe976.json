{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseUpdater = void 0;\nconst brackets_model_1 = require(\"brackets-model\");\nconst ordering_1 = require(\"../ordering\");\nconst creator_1 = require(\"./stage/creator\");\nconst getter_1 = require(\"./getter\");\nconst get_1 = require(\"../get\");\nconst helpers = require(\"../helpers\");\nclass BaseUpdater extends getter_1.BaseGetter {\n  /**\n   * Updates or resets the seeding of a stage.\n   *\n   * @param stageId ID of the stage.\n   * @param seeding A new seeding or `null` to reset the existing seeding.\n   * @param seeding.seeding Can contain names, IDs or BYEs.\n   * @param seeding.seedingIds Can only contain IDs or BYEs.\n   * @param keepSameSize Whether to keep the same size as before for the stage.\n   */\n  async updateSeeding(stageId, {\n    seeding,\n    seedingIds\n  }, keepSameSize) {\n    var _a, _b;\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    const newSize = keepSameSize ? stage.settings.size : (_b = (_a = seedingIds || seeding) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    const creator = new creator_1.StageCreator(this.storage, {\n      name: stage.name,\n      tournamentId: stage.tournament_id,\n      type: stage.type,\n      settings: {\n        ...stage.settings,\n        ...(newSize === 0 ? {} : {\n          size: newSize\n        }) // Just reset the seeding if the new size is going to be empty.\n      },\n      ...(seedingIds ? {\n        seedingIds\n      } : {\n        seeding: seeding !== null && seeding !== void 0 ? seeding : undefined\n      })\n    });\n    creator.setExisting(stageId, false);\n    const method = getter_1.BaseGetter.getSeedingOrdering(stage.type, creator);\n    const slots = await creator.getSlots();\n    const matches = await this.getSeedingMatches(stage.id, stage.type);\n    if (!matches) throw Error('Error getting matches associated to the seeding.');\n    const ordered = ordering_1.ordering[method](slots);\n    BaseUpdater.assertCanUpdateSeeding(matches, ordered);\n    await creator.run();\n  }\n  /**\n   * Confirms the current seeding of a stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async confirmCurrentSeeding(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    const get = new get_1.Get(this.storage);\n    const currentSeeding = await get.seeding(stageId);\n    const newSeeding = helpers.convertSlotsToSeeding(currentSeeding.map(helpers.convertTBDtoBYE));\n    const creator = new creator_1.StageCreator(this.storage, {\n      name: stage.name,\n      tournamentId: stage.tournament_id,\n      type: stage.type,\n      settings: stage.settings,\n      seeding: newSeeding\n    });\n    creator.setExisting(stageId, true);\n    await creator.run();\n  }\n  /**\n   * Updates a parent match based on its child games.\n   *\n   * @param parentId ID of the parent match.\n   * @param inRoundRobin Indicates whether the parent match is in a round-robin stage.\n   */\n  async updateParentMatch(parentId, inRoundRobin) {\n    const storedParent = await this.storage.select('match', parentId);\n    if (!storedParent) throw Error('Parent not found.');\n    const games = await this.storage.select('match_game', {\n      parent_id: parentId\n    });\n    if (!games) throw Error('No match games.');\n    const parentScores = helpers.getChildGamesResults(games);\n    const parent = helpers.getParentMatchResults(storedParent, parentScores);\n    helpers.setParentMatchCompleted(parent, storedParent.child_count, inRoundRobin);\n    await this.updateMatch(storedParent, parent, true);\n  }\n  /**\n   * Throws an error if a match is locked and the new seeding will change this match's participants.\n   *\n   * @param matches The matches stored in the database.\n   * @param slots The slots to check from the new seeding.\n   */\n  static assertCanUpdateSeeding(matches, slots) {\n    var _a, _b;\n    let index = 0;\n    for (const match of matches) {\n      // Changing the seeding would reset the matches of round >= 2, leaving the scores behind, with no participants.\n      if (match.status === brackets_model_1.Status.Archived) throw Error('A match of round 1 is archived, which means round 2 was started.');\n      const opponent1 = slots[index++];\n      const opponent2 = slots[index++];\n      const isParticipantLocked = helpers.isMatchParticipantLocked(match);\n      // The match is participant locked, and the participants would have to change.\n      if (isParticipantLocked && (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.id) !== (opponent1 === null || opponent1 === void 0 ? void 0 : opponent1.id) || ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.id) !== (opponent2 === null || opponent2 === void 0 ? void 0 : opponent2.id))) throw Error('A match is locked.');\n    }\n  }\n  /**\n   * Updates the matches related (previous and next) to a match.\n   *\n   * @param match A match.\n   * @param updatePrevious Whether to update the previous matches.\n   * @param updateNext Whether to update the next matches.\n   */\n  async updateRelatedMatches(match, updatePrevious, updateNext) {\n    // This is a consolation match (doesn't have a `group_id`, nor a `round_id`).\n    // It doesn't have any related matches from the POV of the library, because the \n    // creation of consolation matches is handled by the user.\n    if (match.round_id === undefined) return;\n    const {\n      roundNumber,\n      roundCount\n    } = await this.getRoundPositionalInfo(match.round_id);\n    const stage = await this.storage.select('stage', match.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    const group = await this.storage.select('group', match.group_id);\n    if (!group) throw Error('Group not found.');\n    const matchLocation = helpers.getMatchLocation(stage.type, group.number);\n    updatePrevious && (await this.updatePrevious(match, matchLocation, stage, roundNumber));\n    updateNext && (await this.updateNext(match, matchLocation, stage, roundNumber, roundCount));\n  }\n  /**\n   * Updates a match based on a partial match.\n   *\n   * @param stored A reference to what will be updated in the storage.\n   * @param match Input of the update.\n   * @param force Whether to force update locked matches.\n   */\n  async updateMatch(stored, match, force) {\n    if (!force && helpers.isMatchUpdateLocked(stored)) throw Error('The match is locked.');\n    const stage = await this.storage.select('stage', stored.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    const inRoundRobin = helpers.isRoundRobin(stage);\n    const {\n      statusChanged,\n      resultChanged\n    } = helpers.setMatchResults(stored, match, inRoundRobin);\n    await this.applyMatchUpdate(stored);\n    // Don't update related matches if it's a simple score update.\n    if (!statusChanged && !resultChanged) return;\n    if (!helpers.isRoundRobin(stage)) await this.updateRelatedMatches(stored, statusChanged, resultChanged);\n  }\n  /**\n   * Updates a match game based on a partial match game.\n   *\n   * @param stored A reference to what will be updated in the storage.\n   * @param game Input of the update.\n   */\n  async updateMatchGame(stored, game) {\n    if (helpers.isMatchUpdateLocked(stored)) throw Error('The match game is locked.');\n    const stage = await this.storage.select('stage', stored.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    const inRoundRobin = helpers.isRoundRobin(stage);\n    helpers.setMatchResults(stored, game, inRoundRobin);\n    if (!(await this.storage.update('match_game', stored.id, stored))) throw Error('Could not update the match game.');\n    await this.updateParentMatch(stored.parent_id, inRoundRobin);\n  }\n  /**\n   * Updates the opponents and status of a match and its child games.\n   *\n   * @param match A match.\n   */\n  async applyMatchUpdate(match) {\n    if (!(await this.storage.update('match', match.id, match))) throw Error('Could not update the match.');\n    if (match.child_count === 0) return;\n    const updatedMatchGame = {\n      opponent1: helpers.toResult(match.opponent1),\n      opponent2: helpers.toResult(match.opponent2)\n    };\n    // Only sync the child games' status with their parent's status when changing the parent match participants\n    // (Locked, Waiting, Ready) or when archiving the parent match.\n    if (match.status <= brackets_model_1.Status.Ready || match.status === brackets_model_1.Status.Archived) updatedMatchGame.status = match.status;\n    if (!(await this.storage.update('match_game', {\n      parent_id: match.id\n    }, updatedMatchGame))) throw Error('Could not update the match game.');\n  }\n  /**\n   * Updates the match(es) leading to the current match based on this match results.\n   *\n   * @param match Input of the update.\n   * @param matchLocation Location of the current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the round.\n   */\n  async updatePrevious(match, matchLocation, stage, roundNumber) {\n    const previousMatches = await this.getPreviousMatches(match, matchLocation, stage, roundNumber);\n    if (previousMatches.length === 0) return;\n    if (match.status >= brackets_model_1.Status.Running) await this.archiveMatches(previousMatches);else await this.resetMatchesStatus(previousMatches);\n  }\n  /**\n   * Sets the status of a list of matches to archived.\n   *\n   * @param matches The matches to update.\n   */\n  async archiveMatches(matches) {\n    for (const match of matches) {\n      if (match.status === brackets_model_1.Status.Archived) continue;\n      match.status = brackets_model_1.Status.Archived;\n      await this.applyMatchUpdate(match);\n    }\n  }\n  /**\n   * Resets the status of a list of matches to what it should currently be.\n   *\n   * @param matches The matches to update.\n   */\n  async resetMatchesStatus(matches) {\n    for (const match of matches) {\n      match.status = helpers.getMatchStatus(match);\n      await this.applyMatchUpdate(match);\n    }\n  }\n  /**\n   * Updates the match(es) following the current match based on this match results.\n   *\n   * @param match Input of the update.\n   * @param matchLocation Location of the current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the round.\n   * @param roundCount Count of rounds.\n   */\n  async updateNext(match, matchLocation, stage, roundNumber, roundCount) {\n    const nextMatches = await this.getNextMatches(match, matchLocation, stage, roundNumber, roundCount);\n    if (nextMatches.length === 0) {\n      // Archive match if it doesn't have following matches and is completed.\n      // When the stage is fully complete, all matches should be archived.\n      if (match.status === brackets_model_1.Status.Completed) await this.archiveMatches([match]);\n      return;\n    }\n    const winnerSide = helpers.getMatchResult(match);\n    const actualRoundNumber = stage.settings.skipFirstRound && matchLocation === 'winner_bracket' ? roundNumber + 1 : roundNumber;\n    if (winnerSide) await this.applyToNextMatches(helpers.setNextOpponent, match, matchLocation, actualRoundNumber, roundCount, nextMatches, winnerSide);else await this.applyToNextMatches(helpers.resetNextOpponent, match, matchLocation, actualRoundNumber, roundCount, nextMatches);\n  }\n  /**\n   * Applies a `SetNextOpponent` function to matches following the current match.\n   *\n   * - `nextMatches[0]` is assumed to be next match for the winner of the current match.\n   * - `nextMatches[1]` is assumed to be next match for the loser of the current match.\n   *\n   * @param setNextOpponent The `SetNextOpponent` function.\n   * @param match The current match.\n   * @param matchLocation Location of the current match.\n   * @param roundNumber Number of the current round.\n   * @param roundCount Count of rounds.\n   * @param nextMatches The matches following the current match.\n   * @param winnerSide Side of the winner in the current match.\n   */\n  async applyToNextMatches(setNextOpponent, match, matchLocation, roundNumber, roundCount, nextMatches, winnerSide) {\n    if (matchLocation === 'final_group') {\n      if (!nextMatches[0]) throw Error('First next match is null.');\n      setNextOpponent(nextMatches[0], 'opponent1', match, 'opponent1');\n      setNextOpponent(nextMatches[0], 'opponent2', match, 'opponent2');\n      await this.applyMatchUpdate(nextMatches[0]);\n      return;\n    }\n    const nextSide = helpers.getNextSide(match.number, roundNumber, roundCount, matchLocation);\n    // First next match\n    if (nextMatches[0]) {\n      setNextOpponent(nextMatches[0], nextSide, match, winnerSide);\n      await this.propagateByeWinners(nextMatches[0]);\n    }\n    if (nextMatches.length !== 2) return;\n    if (!nextMatches[1]) throw Error('Second next match is null.');\n    // Second next match\n    if (matchLocation === 'single_bracket') {\n      // Going into consolation final (single elimination)\n      setNextOpponent(nextMatches[1], nextSide, match, winnerSide && helpers.getOtherSide(winnerSide));\n      await this.applyMatchUpdate(nextMatches[1]);\n    } else if (matchLocation === 'winner_bracket') {\n      // Going into loser bracket match (double elimination)\n      const nextSideIntoLB = helpers.getNextSideLoserBracket(match.number, nextMatches[1], roundNumber);\n      setNextOpponent(nextMatches[1], nextSideIntoLB, match, winnerSide && helpers.getOtherSide(winnerSide));\n      await this.propagateByeWinners(nextMatches[1]);\n    } else if (matchLocation === 'loser_bracket') {\n      // Going into consolation final (double elimination)\n      const nextSideIntoConsolationFinal = helpers.getNextSideConsolationFinalDoubleElimination(roundNumber);\n      setNextOpponent(nextMatches[1], nextSideIntoConsolationFinal, match, winnerSide && helpers.getOtherSide(winnerSide));\n      await this.propagateByeWinners(nextMatches[1]);\n    }\n  }\n  /**\n   * Propagates winner against BYEs in related matches.\n   *\n   * @param match The current match.\n   */\n  async propagateByeWinners(match) {\n    helpers.setMatchResults(match, match, false); // BYE propagation is only in non round-robin stages.\n    await this.applyMatchUpdate(match);\n    if (helpers.hasBye(match)) await this.updateRelatedMatches(match, true, true);\n  }\n}\nexports.BaseUpdater = BaseUpdater;","map":{"version":3,"names":["brackets_model_1","require","ordering_1","creator_1","getter_1","get_1","helpers","BaseUpdater","BaseGetter","updateSeeding","stageId","seeding","seedingIds","keepSameSize","stage","storage","select","Error","newSize","settings","size","_b","_a","length","creator","StageCreator","name","tournamentId","tournament_id","type","undefined","setExisting","method","getSeedingOrdering","slots","getSlots","matches","getSeedingMatches","id","ordered","ordering","assertCanUpdateSeeding","run","confirmCurrentSeeding","get","Get","currentSeeding","newSeeding","convertSlotsToSeeding","map","convertTBDtoBYE","updateParentMatch","parentId","inRoundRobin","storedParent","games","parent_id","parentScores","getChildGamesResults","parent","getParentMatchResults","setParentMatchCompleted","child_count","updateMatch","index","match","status","Status","Archived","opponent1","opponent2","isParticipantLocked","isMatchParticipantLocked","updateRelatedMatches","updatePrevious","updateNext","round_id","roundNumber","roundCount","getRoundPositionalInfo","stage_id","group","group_id","matchLocation","getMatchLocation","number","stored","force","isMatchUpdateLocked","isRoundRobin","statusChanged","resultChanged","setMatchResults","applyMatchUpdate","updateMatchGame","game","update","updatedMatchGame","toResult","Ready","previousMatches","getPreviousMatches","Running","archiveMatches","resetMatchesStatus","getMatchStatus","nextMatches","getNextMatches","Completed","winnerSide","getMatchResult","actualRoundNumber","skipFirstRound","applyToNextMatches","setNextOpponent","resetNextOpponent","nextSide","getNextSide","propagateByeWinners","getOtherSide","nextSideIntoLB","getNextSideLoserBracket","nextSideIntoConsolationFinal","getNextSideConsolationFinalDoubleElimination","hasBye","exports"],"sources":["../../src/base/updater.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,gBAAA,GAAAC,OAAA;AAGA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AACA,MAAAI,KAAA,GAAAJ,OAAA;AACA,MAAAK,OAAA,GAAAL,OAAA;AAEA,MAAaM,WAAY,SAAQH,QAAA,CAAAI,UAAU;EAEvC;;;;;;;;;EASU,MAAMC,aAAaA,CAACC,OAAW,EAAE;IAAEC,OAAO;IAAEC;EAAU,CAA+D,EAAEC,YAAqB;;IAClJ,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEN,OAAO,CAAC;IACzD,IAAI,CAACI,KAAK,EAAE,MAAMG,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAMC,OAAO,GAAGL,YAAY,GAAGC,KAAK,CAACK,QAAQ,CAACC,IAAI,GAAG,CAAAC,EAAA,IAAAC,EAAA,GAACV,UAAU,IAAID,OAAQ,cAAAW,EAAA,uBAAAA,EAAA,CAAEC,MAAM,cAAAF,EAAA,cAAAA,EAAA,GAAI,CAAC;IAEzF,MAAMG,OAAO,GAAG,IAAIrB,SAAA,CAAAsB,YAAY,CAAC,IAAI,CAACV,OAAO,EAAE;MAC3CW,IAAI,EAAEZ,KAAK,CAACY,IAAI;MAChBC,YAAY,EAAEb,KAAK,CAACc,aAAa;MACjCC,IAAI,EAAEf,KAAK,CAACe,IAAI;MAChBV,QAAQ,EAAE;QACN,GAAGL,KAAK,CAACK,QAAQ;QACjB,IAAID,OAAO,KAAK,CAAC,GAAG,EAAE,GAAG;UAAEE,IAAI,EAAEF;QAAO,CAAE,CAAC,CAAE;OAChD;MACD,IAAKN,UAAU,GAAG;QAAEA;MAAU,CAAE,GAAG;QAAED,OAAO,EAAEA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAImB;MAAS,CAAE;KACvE,CAAC;IAEFN,OAAO,CAACO,WAAW,CAACrB,OAAO,EAAE,KAAK,CAAC;IAEnC,MAAMsB,MAAM,GAAG5B,QAAA,CAAAI,UAAU,CAACyB,kBAAkB,CAACnB,KAAK,CAACe,IAAI,EAAEL,OAAO,CAAC;IACjE,MAAMU,KAAK,GAAG,MAAMV,OAAO,CAACW,QAAQ,EAAE;IAEtC,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACvB,KAAK,CAACwB,EAAE,EAAExB,KAAK,CAACe,IAAI,CAAC;IAClE,IAAI,CAACO,OAAO,EACR,MAAMnB,KAAK,CAAC,kDAAkD,CAAC;IAEnE,MAAMsB,OAAO,GAAGrC,UAAA,CAAAsC,QAAQ,CAACR,MAAM,CAAC,CAACE,KAAK,CAAC;IACvC3B,WAAW,CAACkC,sBAAsB,CAACL,OAAO,EAAEG,OAAO,CAAC;IAEpD,MAAMf,OAAO,CAACkB,GAAG,EAAE;EACvB;EAEA;;;;;EAKU,MAAMC,qBAAqBA,CAACjC,OAAW;IAC7C,MAAMI,KAAK,GAAG,MAAM,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEN,OAAO,CAAC;IACzD,IAAI,CAACI,KAAK,EAAE,MAAMG,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAM2B,GAAG,GAAG,IAAIvC,KAAA,CAAAwC,GAAG,CAAC,IAAI,CAAC9B,OAAO,CAAC;IACjC,MAAM+B,cAAc,GAAG,MAAMF,GAAG,CAACjC,OAAO,CAACD,OAAO,CAAC;IACjD,MAAMqC,UAAU,GAAGzC,OAAO,CAAC0C,qBAAqB,CAACF,cAAc,CAACG,GAAG,CAAC3C,OAAO,CAAC4C,eAAe,CAAC,CAAC;IAE7F,MAAM1B,OAAO,GAAG,IAAIrB,SAAA,CAAAsB,YAAY,CAAC,IAAI,CAACV,OAAO,EAAE;MAC3CW,IAAI,EAAEZ,KAAK,CAACY,IAAI;MAChBC,YAAY,EAAEb,KAAK,CAACc,aAAa;MACjCC,IAAI,EAAEf,KAAK,CAACe,IAAI;MAChBV,QAAQ,EAAEL,KAAK,CAACK,QAAQ;MACxBR,OAAO,EAAEoC;KACZ,CAAC;IAEFvB,OAAO,CAACO,WAAW,CAACrB,OAAO,EAAE,IAAI,CAAC;IAElC,MAAMc,OAAO,CAACkB,GAAG,EAAE;EACvB;EAEA;;;;;;EAMU,MAAMS,iBAAiBA,CAACC,QAAY,EAAEC,YAAqB;IACjE,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACvC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEoC,QAAQ,CAAC;IACjE,IAAI,CAACE,YAAY,EAAE,MAAMrC,KAAK,CAAC,mBAAmB,CAAC;IAEnD,MAAMsC,KAAK,GAAG,MAAM,IAAI,CAACxC,OAAO,CAACC,MAAM,CAAC,YAAY,EAAE;MAAEwC,SAAS,EAAEJ;IAAQ,CAAE,CAAC;IAC9E,IAAI,CAACG,KAAK,EAAE,MAAMtC,KAAK,CAAC,iBAAiB,CAAC;IAE1C,MAAMwC,YAAY,GAAGnD,OAAO,CAACoD,oBAAoB,CAACH,KAAK,CAAC;IACxD,MAAMI,MAAM,GAAGrD,OAAO,CAACsD,qBAAqB,CAACN,YAAY,EAAEG,YAAY,CAAC;IAExEnD,OAAO,CAACuD,uBAAuB,CAACF,MAAM,EAAEL,YAAY,CAACQ,WAAW,EAAET,YAAY,CAAC;IAE/E,MAAM,IAAI,CAACU,WAAW,CAACT,YAAY,EAAEK,MAAM,EAAE,IAAI,CAAC;EACtD;EAEA;;;;;;EAMU,OAAOlB,sBAAsBA,CAACL,OAAgB,EAAEF,KAAwB;;IAC9E,IAAI8B,KAAK,GAAG,CAAC;IAEb,KAAK,MAAMC,KAAK,IAAI7B,OAAO,EAAE;MACzB;MACA,IAAI6B,KAAK,CAACC,MAAM,KAAKlE,gBAAA,CAAAmE,MAAM,CAACC,QAAQ,EAChC,MAAMnD,KAAK,CAAC,kEAAkE,CAAC;MAEnF,MAAMoD,SAAS,GAAGnC,KAAK,CAAC8B,KAAK,EAAE,CAAC;MAChC,MAAMM,SAAS,GAAGpC,KAAK,CAAC8B,KAAK,EAAE,CAAC;MAChC,MAAMO,mBAAmB,GAAGjE,OAAO,CAACkE,wBAAwB,CAACP,KAAK,CAAC;MAEnE;MACA,IAAIM,mBAAmB,KAAK,EAAAjD,EAAA,GAAA2C,KAAK,CAACI,SAAS,cAAA/C,EAAA,uBAAAA,EAAA,CAAEgB,EAAE,OAAK+B,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE/B,EAAE,KAAI,EAAAjB,EAAA,GAAA4C,KAAK,CAACK,SAAS,cAAAjD,EAAA,uBAAAA,EAAA,CAAEiB,EAAE,OAAKgC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEhC,EAAE,EAAC,EACvG,MAAMrB,KAAK,CAAC,oBAAoB,CAAC;;EAE7C;EAEA;;;;;;;EAOU,MAAMwD,oBAAoBA,CAACR,KAAY,EAAES,cAAuB,EAAEC,UAAmB;IAC3F;IACA;IACA;IACA,IAAIV,KAAK,CAACW,QAAQ,KAAK9C,SAAS,EAC5B;IAEJ,MAAM;MAAE+C,WAAW;MAAEC;IAAU,CAAE,GAAG,MAAM,IAAI,CAACC,sBAAsB,CAACd,KAAK,CAACW,QAAQ,CAAC;IAErF,MAAM9D,KAAK,GAAG,MAAM,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEiD,KAAK,CAACe,QAAQ,CAAC;IAChE,IAAI,CAAClE,KAAK,EAAE,MAAMG,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAMgE,KAAK,GAAG,MAAM,IAAI,CAAClE,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEiD,KAAK,CAACiB,QAAQ,CAAC;IAChE,IAAI,CAACD,KAAK,EAAE,MAAMhE,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAMkE,aAAa,GAAG7E,OAAO,CAAC8E,gBAAgB,CAACtE,KAAK,CAACe,IAAI,EAAEoD,KAAK,CAACI,MAAM,CAAC;IAExEX,cAAc,KAAI,MAAM,IAAI,CAACA,cAAc,CAACT,KAAK,EAAEkB,aAAa,EAAErE,KAAK,EAAE+D,WAAW,CAAC;IACrFF,UAAU,KAAI,MAAM,IAAI,CAACA,UAAU,CAACV,KAAK,EAAEkB,aAAa,EAAErE,KAAK,EAAE+D,WAAW,EAAEC,UAAU,CAAC;EAC7F;EAEA;;;;;;;EAOU,MAAMf,WAAWA,CAACuB,MAAa,EAAErB,KAAyB,EAAEsB,KAAe;IACjF,IAAI,CAACA,KAAK,IAAIjF,OAAO,CAACkF,mBAAmB,CAACF,MAAM,CAAC,EAC7C,MAAMrE,KAAK,CAAC,sBAAsB,CAAC;IAEvC,MAAMH,KAAK,GAAG,MAAM,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEsE,MAAM,CAACN,QAAQ,CAAC;IACjE,IAAI,CAAClE,KAAK,EAAE,MAAMG,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAMoC,YAAY,GAAG/C,OAAO,CAACmF,YAAY,CAAC3E,KAAK,CAAC;IAEhD,MAAM;MAAE4E,aAAa;MAAEC;IAAa,CAAE,GAAGrF,OAAO,CAACsF,eAAe,CAACN,MAAM,EAAErB,KAAK,EAAEZ,YAAY,CAAC;IAC7F,MAAM,IAAI,CAACwC,gBAAgB,CAACP,MAAM,CAAC;IAEnC;IACA,IAAI,CAACI,aAAa,IAAI,CAACC,aAAa,EAAE;IAEtC,IAAI,CAACrF,OAAO,CAACmF,YAAY,CAAC3E,KAAK,CAAC,EAC5B,MAAM,IAAI,CAAC2D,oBAAoB,CAACa,MAAM,EAAEI,aAAa,EAAEC,aAAa,CAAC;EAC7E;EAEA;;;;;;EAMU,MAAMG,eAAeA,CAACR,MAAiB,EAAES,IAA4B;IAC3E,IAAIzF,OAAO,CAACkF,mBAAmB,CAACF,MAAM,CAAC,EACnC,MAAMrE,KAAK,CAAC,2BAA2B,CAAC;IAE5C,MAAMH,KAAK,GAAG,MAAM,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEsE,MAAM,CAACN,QAAQ,CAAC;IACjE,IAAI,CAAClE,KAAK,EAAE,MAAMG,KAAK,CAAC,kBAAkB,CAAC;IAE3C,MAAMoC,YAAY,GAAG/C,OAAO,CAACmF,YAAY,CAAC3E,KAAK,CAAC;IAEhDR,OAAO,CAACsF,eAAe,CAACN,MAAM,EAAES,IAAI,EAAE1C,YAAY,CAAC;IAEnD,IAAI,EAAC,MAAM,IAAI,CAACtC,OAAO,CAACiF,MAAM,CAAC,YAAY,EAAEV,MAAM,CAAChD,EAAE,EAAEgD,MAAM,CAAC,GAC3D,MAAMrE,KAAK,CAAC,kCAAkC,CAAC;IAEnD,MAAM,IAAI,CAACkC,iBAAiB,CAACmC,MAAM,CAAC9B,SAAS,EAAEH,YAAY,CAAC;EAChE;EAEA;;;;;EAKU,MAAMwC,gBAAgBA,CAAC5B,KAAY;IACzC,IAAI,EAAC,MAAM,IAAI,CAAClD,OAAO,CAACiF,MAAM,CAAC,OAAO,EAAE/B,KAAK,CAAC3B,EAAE,EAAE2B,KAAK,CAAC,GACpD,MAAMhD,KAAK,CAAC,6BAA6B,CAAC;IAE9C,IAAIgD,KAAK,CAACH,WAAW,KAAK,CAAC,EAAE;IAE7B,MAAMmC,gBAAgB,GAAuB;MACzC5B,SAAS,EAAE/D,OAAO,CAAC4F,QAAQ,CAACjC,KAAK,CAACI,SAAS,CAAC;MAC5CC,SAAS,EAAEhE,OAAO,CAAC4F,QAAQ,CAACjC,KAAK,CAACK,SAAS;KAC9C;IAED;IACA;IACA,IAAIL,KAAK,CAACC,MAAM,IAAIlE,gBAAA,CAAAmE,MAAM,CAACgC,KAAK,IAAIlC,KAAK,CAACC,MAAM,KAAKlE,gBAAA,CAAAmE,MAAM,CAACC,QAAQ,EAChE6B,gBAAgB,CAAC/B,MAAM,GAAGD,KAAK,CAACC,MAAM;IAE1C,IAAI,EAAC,MAAM,IAAI,CAACnD,OAAO,CAACiF,MAAM,CAAC,YAAY,EAAE;MAAExC,SAAS,EAAES,KAAK,CAAC3B;IAAE,CAAE,EAAE2D,gBAAgB,CAAC,GACnF,MAAMhF,KAAK,CAAC,kCAAkC,CAAC;EACvD;EAEA;;;;;;;;EAQU,MAAMyD,cAAcA,CAACT,KAAY,EAAEkB,aAAwB,EAAErE,KAAY,EAAE+D,WAAmB;IACpG,MAAMuB,eAAe,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAACpC,KAAK,EAAEkB,aAAa,EAAErE,KAAK,EAAE+D,WAAW,CAAC;IAC/F,IAAIuB,eAAe,CAAC7E,MAAM,KAAK,CAAC,EAAE;IAElC,IAAI0C,KAAK,CAACC,MAAM,IAAIlE,gBAAA,CAAAmE,MAAM,CAACmC,OAAO,EAC9B,MAAM,IAAI,CAACC,cAAc,CAACH,eAAe,CAAC,CAAC,KAE3C,MAAM,IAAI,CAACI,kBAAkB,CAACJ,eAAe,CAAC;EACtD;EAEA;;;;;EAKU,MAAMG,cAAcA,CAACnE,OAAgB;IAC3C,KAAK,MAAM6B,KAAK,IAAI7B,OAAO,EAAE;MACzB,IAAI6B,KAAK,CAACC,MAAM,KAAKlE,gBAAA,CAAAmE,MAAM,CAACC,QAAQ,EAChC;MAEJH,KAAK,CAACC,MAAM,GAAGlE,gBAAA,CAAAmE,MAAM,CAACC,QAAQ;MAC9B,MAAM,IAAI,CAACyB,gBAAgB,CAAC5B,KAAK,CAAC;;EAE1C;EAEA;;;;;EAKU,MAAMuC,kBAAkBA,CAACpE,OAAgB;IAC/C,KAAK,MAAM6B,KAAK,IAAI7B,OAAO,EAAE;MACzB6B,KAAK,CAACC,MAAM,GAAG5D,OAAO,CAACmG,cAAc,CAACxC,KAAK,CAAC;MAC5C,MAAM,IAAI,CAAC4B,gBAAgB,CAAC5B,KAAK,CAAC;;EAE1C;EAEA;;;;;;;;;EASU,MAAMU,UAAUA,CAACV,KAAY,EAAEkB,aAAwB,EAAErE,KAAY,EAAE+D,WAAmB,EAAEC,UAAkB;IACpH,MAAM4B,WAAW,GAAG,MAAM,IAAI,CAACC,cAAc,CAAC1C,KAAK,EAAEkB,aAAa,EAAErE,KAAK,EAAE+D,WAAW,EAAEC,UAAU,CAAC;IACnG,IAAI4B,WAAW,CAACnF,MAAM,KAAK,CAAC,EAAE;MAC1B;MACA;MACA,IAAI0C,KAAK,CAACC,MAAM,KAAKlE,gBAAA,CAAAmE,MAAM,CAACyC,SAAS,EACjC,MAAM,IAAI,CAACL,cAAc,CAAC,CAACtC,KAAK,CAAC,CAAC;MAEtC;;IAGJ,MAAM4C,UAAU,GAAGvG,OAAO,CAACwG,cAAc,CAAC7C,KAAK,CAAC;IAChD,MAAM8C,iBAAiB,GAAIjG,KAAK,CAACK,QAAQ,CAAC6F,cAAc,IAAI7B,aAAa,KAAK,gBAAgB,GAAIN,WAAW,GAAG,CAAC,GAAGA,WAAW;IAE/H,IAAIgC,UAAU,EACV,MAAM,IAAI,CAACI,kBAAkB,CAAC3G,OAAO,CAAC4G,eAAe,EAAEjD,KAAK,EAAEkB,aAAa,EAAE4B,iBAAiB,EAAEjC,UAAU,EAAE4B,WAAW,EAAEG,UAAU,CAAC,CAAC,KAErI,MAAM,IAAI,CAACI,kBAAkB,CAAC3G,OAAO,CAAC6G,iBAAiB,EAAElD,KAAK,EAAEkB,aAAa,EAAE4B,iBAAiB,EAAEjC,UAAU,EAAE4B,WAAW,CAAC;EAClI;EAEA;;;;;;;;;;;;;;EAcU,MAAMO,kBAAkBA,CAACC,eAAgC,EAAEjD,KAAY,EAAEkB,aAAwB,EAAEN,WAAmB,EAAEC,UAAkB,EAAE4B,WAA6B,EAAEG,UAAiB;IAClM,IAAI1B,aAAa,KAAK,aAAa,EAAE;MACjC,IAAI,CAACuB,WAAW,CAAC,CAAC,CAAC,EAAE,MAAMzF,KAAK,CAAC,2BAA2B,CAAC;MAC7DiG,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,EAAEzC,KAAK,EAAE,WAAW,CAAC;MAChEiD,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,EAAEzC,KAAK,EAAE,WAAW,CAAC;MAChE,MAAM,IAAI,CAAC4B,gBAAgB,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;MAC3C;;IAGJ,MAAMU,QAAQ,GAAG9G,OAAO,CAAC+G,WAAW,CAACpD,KAAK,CAACoB,MAAM,EAAER,WAAW,EAAEC,UAAU,EAAEK,aAAa,CAAC;IAE1F;IACA,IAAIuB,WAAW,CAAC,CAAC,CAAC,EAAE;MAChBQ,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAEU,QAAQ,EAAEnD,KAAK,EAAE4C,UAAU,CAAC;MAC5D,MAAM,IAAI,CAACS,mBAAmB,CAACZ,WAAW,CAAC,CAAC,CAAC,CAAC;;IAGlD,IAAIA,WAAW,CAACnF,MAAM,KAAK,CAAC,EAAE;IAC9B,IAAI,CAACmF,WAAW,CAAC,CAAC,CAAC,EAAE,MAAMzF,KAAK,CAAC,4BAA4B,CAAC;IAE9D;IACA,IAAIkE,aAAa,KAAK,gBAAgB,EAAE;MACpC;MACA+B,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAEU,QAAQ,EAAEnD,KAAK,EAAE4C,UAAU,IAAIvG,OAAO,CAACiH,YAAY,CAACV,UAAU,CAAC,CAAC;MAChG,MAAM,IAAI,CAAChB,gBAAgB,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;KAC9C,MAAM,IAAIvB,aAAa,KAAK,gBAAgB,EAAE;MAC3C;MACA,MAAMqC,cAAc,GAAGlH,OAAO,CAACmH,uBAAuB,CAACxD,KAAK,CAACoB,MAAM,EAAEqB,WAAW,CAAC,CAAC,CAAC,EAAE7B,WAAW,CAAC;MACjGqC,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAEc,cAAc,EAAEvD,KAAK,EAAE4C,UAAU,IAAIvG,OAAO,CAACiH,YAAY,CAACV,UAAU,CAAC,CAAC;MACtG,MAAM,IAAI,CAACS,mBAAmB,CAACZ,WAAW,CAAC,CAAC,CAAC,CAAC;KACjD,MAAM,IAAIvB,aAAa,KAAK,eAAe,EAAE;MAC1C;MACA,MAAMuC,4BAA4B,GAAGpH,OAAO,CAACqH,4CAA4C,CAAC9C,WAAW,CAAC;MACtGqC,eAAe,CAACR,WAAW,CAAC,CAAC,CAAC,EAAEgB,4BAA4B,EAAEzD,KAAK,EAAE4C,UAAU,IAAIvG,OAAO,CAACiH,YAAY,CAACV,UAAU,CAAC,CAAC;MACpH,MAAM,IAAI,CAACS,mBAAmB,CAACZ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEtD;EAEA;;;;;EAKU,MAAMY,mBAAmBA,CAACrD,KAAY;IAC5C3D,OAAO,CAACsF,eAAe,CAAC3B,KAAK,EAAEA,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC9C,MAAM,IAAI,CAAC4B,gBAAgB,CAAC5B,KAAK,CAAC;IAElC,IAAI3D,OAAO,CAACsH,MAAM,CAAC3D,KAAK,CAAC,EACrB,MAAM,IAAI,CAACQ,oBAAoB,CAACR,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;EAC1D;;AAjWJ4D,OAAA,CAAAtH,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}