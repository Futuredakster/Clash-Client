{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Update = void 0;\nconst brackets_model_1 = require(\"brackets-model\");\nconst ordering_1 = require(\"./ordering\");\nconst updater_1 = require(\"./base/updater\");\nconst helpers = require(\"./helpers\");\nclass Update extends updater_1.BaseUpdater {\n  /**\n   * Updates partial information of a match. Its id must be given.\n   *\n   * This will update related matches accordingly.\n   *\n   * @param match Values to change in a match.\n   */\n  async match(match) {\n    if (match.id === undefined) throw Error('No match id given.');\n    const stored = await this.storage.select('match', match.id);\n    if (!stored) throw Error('Match not found.');\n    await this.updateMatch(stored, match);\n  }\n  /**\n   * Updates partial information of a match game. Its id must be given.\n   *\n   * This will update the parent match accordingly.\n   *\n   * @param game Values to change in a match game.\n   */\n  async matchGame(game) {\n    const stored = await this.findMatchGame(game);\n    await this.updateMatchGame(stored, game);\n  }\n  /**\n   * Updates the seed ordering of every ordered round in a stage.\n   *\n   * @param stageId ID of the stage.\n   * @param seedOrdering A list of ordering methods.\n   */\n  async ordering(stageId, seedOrdering) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    helpers.ensureNotRoundRobin(stage);\n    const roundsToOrder = await this.getOrderedRounds(stage);\n    if (seedOrdering.length !== roundsToOrder.length) throw Error('The count of seed orderings is incorrect.');\n    for (let i = 0; i < roundsToOrder.length; i++) await this.updateRoundOrdering(roundsToOrder[i], seedOrdering[i]);\n  }\n  /**\n   * Updates the seed ordering of a round.\n   *\n   * @param roundId ID of the round.\n   * @param method Seed ordering method.\n   */\n  async roundOrdering(roundId, method) {\n    const round = await this.storage.select('round', roundId);\n    if (!round) throw Error('This round does not exist.');\n    const stage = await this.storage.select('stage', round.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    helpers.ensureNotRoundRobin(stage);\n    await this.updateRoundOrdering(round, method);\n  }\n  /**\n   * Updates child count of all matches of a given level.\n   *\n   * @param level The level at which to act.\n   * @param id ID of the chosen level.\n   * @param childCount The target child count.\n   */\n  async matchChildCount(level, id, childCount) {\n    switch (level) {\n      case 'stage':\n        await this.updateStageMatchChildCount(id, childCount);\n        break;\n      case 'group':\n        await this.updateGroupMatchChildCount(id, childCount);\n        break;\n      case 'round':\n        await this.updateRoundMatchChildCount(id, childCount);\n        break;\n      case 'match':\n        const match = await this.storage.select('match', id);\n        if (!match) throw Error('Match not found.');\n        await this.adjustMatchChildGames(match, childCount);\n        break;\n      default:\n        throw Error('Unknown child count level.');\n    }\n  }\n  /**\n   * Updates the seeding of a stage.\n   *\n   * @param stageId ID of the stage.\n   * @param seeding The new seeding.\n   * @param keepSameSize Whether to keep the same size as before for the stage. **Default:** false.\n   */\n  async seeding(stageId, seeding, keepSameSize = false) {\n    await this.updateSeeding(stageId, {\n      seeding\n    }, keepSameSize);\n  }\n  /**\n   * Updates the seeding of a stage (with a list of IDs).\n   *\n   * @param stageId ID of the stage.\n   * @param seedingIds The new seeding, containing only IDs.\n   * @param keepSameSize Whether to keep the same size as before for the stage. **Default:** false.\n   */\n  async seedingIds(stageId, seedingIds, keepSameSize = false) {\n    await this.updateSeeding(stageId, {\n      seedingIds\n    }, keepSameSize);\n  }\n  /**\n   * Confirms the seeding of a stage.\n   *\n   * This will convert TBDs to BYEs and propagate them.\n   *\n   * @param stageId ID of the stage.\n   */\n  async confirmSeeding(stageId) {\n    await this.confirmCurrentSeeding(stageId);\n  }\n  /**\n   * Update the seed ordering of a round.\n   *\n   * @param round The round of which to update the ordering.\n   * @param method The new ordering method.\n   */\n  async updateRoundOrdering(round, method) {\n    const matches = await this.storage.select('match', {\n      round_id: round.id\n    });\n    if (!matches) throw Error('This round has no match.');\n    if (matches.some(match => match.status > brackets_model_1.Status.Ready)) throw Error('At least one match has started or is completed.');\n    const stage = await this.storage.select('stage', round.stage_id);\n    if (!stage) throw Error('Stage not found.');\n    if (stage.settings.size === undefined) throw Error('Undefined stage size.');\n    const group = await this.storage.select('group', round.group_id);\n    if (!group) throw Error('Group not found.');\n    const inLoserBracket = helpers.isLoserBracket(stage.type, group.number);\n    const roundCountLB = helpers.getLowerBracketRoundCount(stage.settings.size);\n    const seeds = helpers.getSeeds(inLoserBracket, round.number, roundCountLB, matches.length);\n    const positions = ordering_1.ordering[method](seeds);\n    await this.applyRoundOrdering(round.number, matches, positions);\n  }\n  /**\n   * Updates child count of all matches of a stage.\n   *\n   * @param stageId ID of the stage.\n   * @param childCount The target child count.\n   */\n  async updateStageMatchChildCount(stageId, childCount) {\n    if (!(await this.storage.update('match', {\n      stage_id: stageId\n    }, {\n      child_count: childCount\n    }))) throw Error('Could not update the match.');\n    const matches = await this.storage.select('match', {\n      stage_id: stageId\n    });\n    if (!matches) throw Error('This stage has no match.');\n    for (const match of matches) await this.adjustMatchChildGames(match, childCount);\n  }\n  /**\n   * Updates child count of all matches of a group.\n   *\n   * @param groupId ID of the group.\n   * @param childCount The target child count.\n   */\n  async updateGroupMatchChildCount(groupId, childCount) {\n    if (!(await this.storage.update('match', {\n      group_id: groupId\n    }, {\n      child_count: childCount\n    }))) throw Error('Could not update the match.');\n    const matches = await this.storage.select('match', {\n      group_id: groupId\n    });\n    if (!matches) throw Error('This group has no match.');\n    for (const match of matches) await this.adjustMatchChildGames(match, childCount);\n  }\n  /**\n   * Updates child count of all matches of a round.\n   *\n   * @param roundId ID of the round.\n   * @param childCount The target child count.\n   */\n  async updateRoundMatchChildCount(roundId, childCount) {\n    if (!(await this.storage.update('match', {\n      round_id: roundId\n    }, {\n      child_count: childCount\n    }))) throw Error('Could not update the match.');\n    const matches = await this.storage.select('match', {\n      round_id: roundId\n    });\n    if (!matches) throw Error('This round has no match.');\n    for (const match of matches) await this.adjustMatchChildGames(match, childCount);\n  }\n  /**\n   * Updates the ordering of participants in a round's matches.\n   *\n   * @param roundNumber The number of the round.\n   * @param matches The matches of the round.\n   * @param positions The new positions.\n   */\n  async applyRoundOrdering(roundNumber, matches, positions) {\n    for (const match of matches) {\n      const updated = {\n        ...match\n      };\n      updated.opponent1 = helpers.findPosition(matches, positions.shift());\n      // The only rounds where we have a second ordered participant are first rounds of brackets (upper and lower).\n      if (roundNumber === 1) updated.opponent2 = helpers.findPosition(matches, positions.shift());\n      if (!(await this.storage.update('match', updated.id, updated))) throw Error('Could not update the match.');\n    }\n  }\n  /**\n   * Adds or deletes match games of a match based on a target child count.\n   *\n   * @param match The match of which child games need to be adjusted.\n   * @param targetChildCount The target child count.\n   */\n  async adjustMatchChildGames(match, targetChildCount) {\n    const games = await this.storage.select('match_game', {\n      parent_id: match.id\n    });\n    let childCount = games ? games.length : 0;\n    while (childCount < targetChildCount) {\n      const id = await this.storage.insert('match_game', {\n        number: childCount + 1,\n        stage_id: match.stage_id,\n        parent_id: match.id,\n        status: match.status,\n        opponent1: {\n          id: null\n        },\n        opponent2: {\n          id: null\n        }\n      });\n      if (id === -1) throw Error('Could not adjust the match games when inserting.');\n      childCount++;\n    }\n    while (childCount > targetChildCount) {\n      const deleted = await this.storage.delete('match_game', {\n        parent_id: match.id,\n        number: childCount\n      });\n      if (!deleted) throw Error('Could not adjust the match games when deleting.');\n      childCount--;\n    }\n    if (!(await this.storage.update('match', match.id, {\n      ...match,\n      child_count: targetChildCount\n    }))) throw Error('Could not update the match.');\n  }\n}\nexports.Update = Update;","map":{"version":3,"names":["brackets_model_1","require","ordering_1","updater_1","helpers","Update","BaseUpdater","match","id","undefined","Error","stored","storage","select","updateMatch","matchGame","game","findMatchGame","updateMatchGame","ordering","stageId","seedOrdering","stage","ensureNotRoundRobin","roundsToOrder","getOrderedRounds","length","i","updateRoundOrdering","roundOrdering","roundId","method","round","stage_id","matchChildCount","level","childCount","updateStageMatchChildCount","updateGroupMatchChildCount","updateRoundMatchChildCount","adjustMatchChildGames","seeding","keepSameSize","updateSeeding","seedingIds","confirmSeeding","confirmCurrentSeeding","matches","round_id","some","status","Status","Ready","settings","size","group","group_id","inLoserBracket","isLoserBracket","type","number","roundCountLB","getLowerBracketRoundCount","seeds","getSeeds","positions","applyRoundOrdering","update","child_count","groupId","roundNumber","updated","opponent1","findPosition","shift","opponent2","targetChildCount","games","parent_id","insert","deleted","delete","exports"],"sources":["../src/update.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}