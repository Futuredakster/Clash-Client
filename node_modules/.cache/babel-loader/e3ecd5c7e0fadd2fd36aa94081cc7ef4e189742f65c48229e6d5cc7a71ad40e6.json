{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseGetter = void 0;\nconst helpers = require(\"../helpers\");\nclass BaseGetter {\n  /**\n   * Creates an instance of a Storage getter.\n   *\n   * @param storage The implementation of Storage.\n   */\n  constructor(storage) {\n    this.storage = storage;\n  }\n  /**\n   * Gets all the rounds that contain ordered participants.\n   *\n   * @param stage The stage to get rounds from.\n   */\n  async getOrderedRounds(stage) {\n    if (!(stage === null || stage === void 0 ? void 0 : stage.settings.size)) throw Error('The stage has no size.');\n    if (stage.type === 'single_elimination') return this.getOrderedRoundsSingleElimination(stage.id);\n    return this.getOrderedRoundsDoubleElimination(stage.id);\n  }\n  /**\n   * Gets all the rounds that contain ordered participants in a single elimination stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async getOrderedRoundsSingleElimination(stageId) {\n    return [await this.getUpperBracketFirstRound(stageId)];\n  }\n  /**\n   * Gets all the rounds that contain ordered participants in a double elimination stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async getOrderedRoundsDoubleElimination(stageId) {\n    // Getting all rounds instead of cherry-picking them is the least expensive.\n    const rounds = await this.storage.select('round', {\n      stage_id: stageId\n    });\n    if (!rounds) throw Error('Error getting rounds.');\n    const loserBracket = await this.getLoserBracket(stageId);\n    if (!loserBracket) throw Error('Loser bracket not found.');\n    const firstRoundWB = rounds[0];\n    const roundsLB = rounds.filter(r => r.group_id === loserBracket.id);\n    const orderedRoundsLB = roundsLB.filter(r => helpers.isOrderingSupportedLoserBracket(r.number, roundsLB.length));\n    return [firstRoundWB, ...orderedRoundsLB];\n  }\n  /**\n   * Gets the positional information (number in group and total number of rounds in group) of a round based on its id.\n   *\n   * @param roundId ID of the round.\n   */\n  async getRoundPositionalInfo(roundId) {\n    const round = await this.storage.select('round', roundId);\n    if (!round) throw Error('Round not found.');\n    const rounds = await this.storage.select('round', {\n      group_id: round.group_id\n    });\n    if (!rounds) throw Error('Error getting rounds.');\n    return {\n      roundNumber: round.number,\n      roundCount: rounds.length\n    };\n  }\n  /**\n   * Gets the matches leading to the given match.\n   *\n   * @param match The current match.\n   * @param matchLocation Location of the current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the round.\n   */\n  async getPreviousMatches(match, matchLocation, stage, roundNumber) {\n    if (matchLocation === 'loser_bracket') return this.getPreviousMatchesLB(match, stage, roundNumber);\n    if (matchLocation === 'final_group') return this.getPreviousMatchesFinal(match, stage, roundNumber);\n    if (roundNumber === 1) return []; // The match is in the first round of an upper bracket.\n    return this.getMatchesBeforeMajorRound(match, roundNumber);\n  }\n  /**\n   * Gets the matches leading to the given match, which is in a final group (consolation final or grand final).\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the current round.\n   */\n  async getPreviousMatchesFinal(match, stage, roundNumber) {\n    if (stage.type === 'single_elimination') return this.getPreviousMatchesFinalSingleElimination(match, stage);\n    return this.getPreviousMatchesFinalDoubleElimination(match, roundNumber);\n  }\n  /**\n   * Gets the matches leading to the given match, which is in a final group (consolation final).\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   */\n  async getPreviousMatchesFinalSingleElimination(match, stage) {\n    const upperBracket = await this.getUpperBracket(match.stage_id);\n    const upperBracketRoundCount = helpers.getUpperBracketRoundCount(stage.settings.size);\n    const semiFinalsRound = await this.storage.selectFirst('round', {\n      group_id: upperBracket.id,\n      number: upperBracketRoundCount - 1 // Second to last round\n    });\n    if (!semiFinalsRound) throw Error('Semi finals round not found.');\n    const semiFinalMatches = await this.storage.select('match', {\n      round_id: semiFinalsRound.id\n    });\n    if (!semiFinalMatches) throw Error('Error getting semi final matches.');\n    // In single elimination, both the final and consolation final have the same previous matches.\n    return semiFinalMatches;\n  }\n  /**\n   * Gets the matches leading to the given match, which is in a final group (grand final).\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the current round.\n   */\n  async getPreviousMatchesFinalDoubleElimination(match, roundNumber) {\n    if (roundNumber > 1)\n      // Double grand final\n      return [await this.findMatch(match.group_id, roundNumber - 1, 1)];\n    const winnerBracket = await this.getUpperBracket(match.stage_id);\n    const lastRoundWB = await this.getLastRound(winnerBracket.id);\n    const winnerBracketFinalMatch = await this.storage.selectFirst('match', {\n      round_id: lastRoundWB.id,\n      number: 1\n    });\n    if (!winnerBracketFinalMatch) throw Error('Match not found.');\n    const loserBracket = await this.getLoserBracket(match.stage_id);\n    if (!loserBracket) throw Error('Loser bracket not found.');\n    const lastRoundLB = await this.getLastRound(loserBracket.id);\n    const loserBracketFinalMatch = await this.storage.selectFirst('match', {\n      round_id: lastRoundLB.id,\n      number: 1\n    });\n    if (!loserBracketFinalMatch) throw Error('Match not found.');\n    return [winnerBracketFinalMatch, loserBracketFinalMatch];\n  }\n  /**\n   * Gets the matches leading to a given match from the loser bracket.\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber Number of the round.\n   */\n  async getPreviousMatchesLB(match, stage, roundNumber) {\n    if (stage.settings.skipFirstRound && roundNumber === 1) return [];\n    if (helpers.hasBye(match)) return []; // Shortcut because we are coming from propagateByes().\n    const winnerBracket = await this.getUpperBracket(match.stage_id);\n    const actualRoundNumberWB = Math.ceil((roundNumber + 1) / 2);\n    const roundNumberWB = stage.settings.skipFirstRound ? actualRoundNumberWB - 1 : actualRoundNumberWB;\n    if (roundNumber === 1) return this.getMatchesBeforeFirstRoundLB(match, winnerBracket.id, roundNumberWB);\n    if (helpers.isMajorRound(roundNumber)) return this.getMatchesBeforeMajorRound(match, roundNumber);\n    return this.getMatchesBeforeMinorRoundLB(match, winnerBracket.id, roundNumber, roundNumberWB);\n  }\n  /**\n   * Gets the matches leading to a given match in a major round (every round of upper bracket or specific ones in lower bracket).\n   *\n   * @param match The current match.\n   * @param roundNumber Number of the round.\n   */\n  async getMatchesBeforeMajorRound(match, roundNumber) {\n    return [await this.findMatch(match.group_id, roundNumber - 1, match.number * 2 - 1), await this.findMatch(match.group_id, roundNumber - 1, match.number * 2)];\n  }\n  /**\n   * Gets the matches leading to a given match in the first round of the loser bracket.\n   *\n   * @param match The current match.\n   * @param winnerBracketId ID of the winner bracket.\n   * @param roundNumberWB The number of the previous round in the winner bracket.\n   */\n  async getMatchesBeforeFirstRoundLB(match, winnerBracketId, roundNumberWB) {\n    return [await this.findMatch(winnerBracketId, roundNumberWB, helpers.getOriginPosition(match, 'opponent1')), await this.findMatch(winnerBracketId, roundNumberWB, helpers.getOriginPosition(match, 'opponent2'))];\n  }\n  /**\n   * Gets the matches leading to a given match in a minor round of the loser bracket.\n   *\n   * @param match The current match.\n   * @param winnerBracketId ID of the winner bracket.\n   * @param roundNumber Number of the current round.\n   * @param roundNumberWB The number of the previous round in the winner bracket.\n   */\n  async getMatchesBeforeMinorRoundLB(match, winnerBracketId, roundNumber, roundNumberWB) {\n    const matchNumber = helpers.getOriginPosition(match, 'opponent1');\n    return [await this.findMatch(winnerBracketId, roundNumberWB, matchNumber), await this.findMatch(match.group_id, roundNumber - 1, match.number)];\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match will go just after.\n   *\n   * @param match The current match.\n   * @param matchLocation Location of the current match.\n   * @param stage The parent stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatches(match, matchLocation, stage, roundNumber, roundCount) {\n    switch (matchLocation) {\n      case 'single_bracket':\n        return this.getNextMatchesUpperBracket(match, stage, roundNumber, roundCount);\n      case 'winner_bracket':\n        return this.getNextMatchesWB(match, stage, roundNumber, roundCount);\n      case 'loser_bracket':\n        return this.getNextMatchesLB(match, stage, roundNumber, roundCount);\n      case 'final_group':\n        return this.getNextMatchesFinal(match, stage, roundNumber, roundCount);\n      default:\n        throw Error('Unknown bracket kind.');\n    }\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match of winner bracket will go just after.\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatchesWB(match, stage, roundNumber, roundCount) {\n    const loserBracket = await this.getLoserBracket(match.stage_id);\n    if (loserBracket === null)\n      // Only one match in the stage, there is no loser bracket.\n      return [];\n    const actualRoundNumber = stage.settings.skipFirstRound ? roundNumber + 1 : roundNumber;\n    const roundNumberLB = actualRoundNumber > 1 ? (actualRoundNumber - 1) * 2 : 1;\n    const participantCount = stage.settings.size;\n    const method = helpers.getLoserOrdering(stage.settings.seedOrdering, roundNumberLB);\n    const actualMatchNumberLB = helpers.findLoserMatchNumber(participantCount, roundNumberLB, match.number, method);\n    return [...(await this.getNextMatchesUpperBracket(match, stage, roundNumber, roundCount)), await this.findMatch(loserBracket.id, roundNumberLB, actualMatchNumberLB)];\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match of an upper bracket will go just after.\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatchesUpperBracket(match, stage, roundNumber, roundCount) {\n    if (stage.type === 'single_elimination') return this.getNextMatchesUpperBracketSingleElimination(match, stage.type, roundNumber, roundCount);\n    return this.getNextMatchesUpperBracketDoubleElimination(match, stage.type, roundNumber, roundCount);\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match of the unique bracket of a single elimination will go just after.\n   *\n   * @param match The current match.\n   * @param stageType Type of the stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatchesUpperBracketSingleElimination(match, stageType, roundNumber, roundCount) {\n    if (roundNumber === roundCount - 1) {\n      const finalGroupId = await this.getFinalGroupId(match.stage_id, stageType);\n      const consolationFinal = await this.getFinalGroupFirstMatch(finalGroupId);\n      return [await this.getDiagonalMatch(match.group_id, roundNumber, match.number), ...(consolationFinal ? [consolationFinal] : [])];\n    }\n    if (roundNumber === roundCount) return [];\n    return [await this.getDiagonalMatch(match.group_id, roundNumber, match.number)];\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match of the unique bracket of a double elimination will go just after.\n   *\n   * @param match The current match.\n   * @param stageType Type of the stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatchesUpperBracketDoubleElimination(match, stageType, roundNumber, roundCount) {\n    if (roundNumber === roundCount) {\n      const finalGroupId = await this.getFinalGroupId(match.stage_id, stageType);\n      return [await this.getFinalGroupFirstMatch(finalGroupId)];\n    }\n    return [await this.getDiagonalMatch(match.group_id, roundNumber, match.number)];\n  }\n  /**\n   * Gets the match(es) where the opponents of the current match of loser bracket will go just after.\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount Count of rounds.\n   */\n  async getNextMatchesLB(match, stage, roundNumber, roundCount) {\n    if (roundNumber === roundCount - 1) {\n      const finalGroupId = await this.getFinalGroupId(match.stage_id, stage.type);\n      const consolationFinal = await this.getConsolationFinalMatchDoubleElimination(finalGroupId);\n      return [...(await this.getMatchAfterMajorRoundLB(match, roundNumber)), ...(consolationFinal ? [consolationFinal] : []) // Loser goes in consolation.\n      ];\n    }\n    if (roundNumber === roundCount) {\n      const finalGroupId = await this.getFinalGroupId(match.stage_id, stage.type);\n      const grandFinal = await this.getFinalGroupFirstMatch(finalGroupId);\n      const consolationFinal = await this.getConsolationFinalMatchDoubleElimination(finalGroupId);\n      return [grandFinal, ...(consolationFinal ? [consolationFinal] : []) // Returned array is length 1 if no consolation final.\n      ];\n    }\n    if (helpers.isMajorRound(roundNumber)) return this.getMatchAfterMajorRoundLB(match, roundNumber);\n    return this.getMatchAfterMinorRoundLB(match, roundNumber);\n  }\n  /**\n   * Gets the first match of the final group (consolation final or grand final).\n   *\n   * @param finalGroupId ID of the final group.\n   */\n  async getFinalGroupFirstMatch(finalGroupId) {\n    if (finalGroupId === null) return null; // `null` is required for `getNextMatchesWB()` because of how `applyToNextMatches()` works.\n    return this.findMatch(finalGroupId, 1, 1);\n  }\n  /**\n   * Gets the consolation final in a double elimination tournament.\n   *\n   * @param finalGroupId ID of the final group.\n   */\n  async getConsolationFinalMatchDoubleElimination(finalGroupId) {\n    if (finalGroupId === null) return null;\n    return this.storage.selectFirst('match', {\n      group_id: finalGroupId,\n      number: 2 // Used to differentiate grand final and consolation final matches in the same final group.\n    });\n  }\n  /**\n   * Gets the match following the current match, which is in the final group (consolation final or grand final).\n   *\n   * @param match The current match.\n   * @param stage The parent stage.\n   * @param roundNumber The number of the current round.\n   * @param roundCount The count of rounds.\n   */\n  async getNextMatchesFinal(match, stage, roundNumber, roundCount) {\n    if (roundNumber === roundCount) return [];\n    if (stage.settings.consolationFinal && match.number === 1 && roundNumber === roundCount - 1) return []; // Current match is the last grand final match.\n    return [await this.findMatch(match.group_id, roundNumber + 1, 1)];\n  }\n  /**\n   * Gets the match where the opponents of the current match of a winner bracket's major round will go just after.\n   *\n   * @param match The current match.\n   * @param roundNumber The number of the current round.\n   */\n  async getMatchAfterMajorRoundLB(match, roundNumber) {\n    return [await this.getParallelMatch(match.group_id, roundNumber, match.number)];\n  }\n  /**\n   * Gets the match where the opponents of the current match of a winner bracket's minor round will go just after.\n   *\n   * @param match The current match.\n   * @param roundNumber The number of the current round.\n   */\n  async getMatchAfterMinorRoundLB(match, roundNumber) {\n    return [await this.getDiagonalMatch(match.group_id, roundNumber, match.number)];\n  }\n  /**\n   * Returns the good seeding ordering based on the stage's type.\n   *\n   * @param stageType The type of the stage.\n   * @param create A reference to a Create instance.\n   */\n  static getSeedingOrdering(stageType, create) {\n    return stageType === 'round_robin' ? create.getRoundRobinOrdering() : create.getStandardBracketFirstRoundOrdering();\n  }\n  /**\n   * Returns the matches which contain the seeding of a stage based on its type.\n   *\n   * @param stageId ID of the stage.\n   * @param stageType The type of the stage.\n   */\n  async getSeedingMatches(stageId, stageType) {\n    if (stageType === 'round_robin') return this.storage.select('match', {\n      stage_id: stageId\n    });\n    try {\n      const firstRound = await this.getUpperBracketFirstRound(stageId);\n      return this.storage.select('match', {\n        round_id: firstRound.id\n      });\n    } catch {\n      return []; // The stage may have not been created yet.\n    }\n  }\n  /**\n   * Gets the first round of the upper bracket.\n   *\n   * @param stageId ID of the stage.\n   */\n  async getUpperBracketFirstRound(stageId) {\n    // Considering the database is ordered, this round will always be the first round of the upper bracket.\n    const firstRound = await this.storage.selectFirst('round', {\n      stage_id: stageId,\n      number: 1\n    }, false);\n    if (!firstRound) throw Error('Round not found.');\n    return firstRound;\n  }\n  /**\n   * Gets the last round of a group.\n   *\n   * @param groupId ID of the group.\n   */\n  async getLastRound(groupId) {\n    const round = await this.storage.selectLast('round', {\n      group_id: groupId\n    }, false);\n    if (!round) throw Error('Error getting rounds.');\n    return round;\n  }\n  /**\n   * Returns the id of the final group (containing consolation final, or grand final, or both).\n   *\n   * @param stageId ID of the stage.\n   * @param stageType Type of the stage.\n   */\n  async getFinalGroupId(stageId, stageType) {\n    const groupNumber = stageType === 'single_elimination' ? 2 /* single bracket + final */ : 3 /* winner bracket + loser bracket + final */;\n    const finalGroup = await this.storage.selectFirst('group', {\n      stage_id: stageId,\n      number: groupNumber\n    });\n    if (!finalGroup) return null;\n    return finalGroup.id;\n  }\n  /**\n   * Gets the upper bracket (the only bracket if single elimination or the winner bracket in double elimination).\n   *\n   * @param stageId ID of the stage.\n   */\n  async getUpperBracket(stageId) {\n    const winnerBracket = await this.storage.selectFirst('group', {\n      stage_id: stageId,\n      number: 1\n    });\n    if (!winnerBracket) throw Error('Winner bracket not found.');\n    return winnerBracket;\n  }\n  /**\n   * Gets the loser bracket.\n   *\n   * @param stageId ID of the stage.\n   */\n  async getLoserBracket(stageId) {\n    return this.storage.selectFirst('group', {\n      stage_id: stageId,\n      number: 2\n    });\n  }\n  /**\n   * Gets the corresponding match in the next round (\"diagonal match\") the usual way.\n   *\n   * Just like from Round 1 to Round 2 in a single elimination stage.\n   *\n   * @param groupId ID of the group.\n   * @param roundNumber Number of the round in its parent group.\n   * @param matchNumber Number of the match in its parent round.\n   */\n  async getDiagonalMatch(groupId, roundNumber, matchNumber) {\n    return this.findMatch(groupId, roundNumber + 1, helpers.getDiagonalMatchNumber(matchNumber));\n  }\n  /**\n   * Gets the corresponding match in the next round (\"parallel match\") the \"major round to minor round\" way.\n   *\n   * Just like from Round 1 to Round 2 in the loser bracket of a double elimination stage.\n   *\n   * @param groupId ID of the group.\n   * @param roundNumber Number of the round in its parent group.\n   * @param matchNumber Number of the match in its parent round.\n   */\n  async getParallelMatch(groupId, roundNumber, matchNumber) {\n    return this.findMatch(groupId, roundNumber + 1, matchNumber);\n  }\n  /**\n   * Finds a match in a given group. The match must have the given number in a round of which the number in group is given.\n   *\n   * **Example:** In group of id 1, give me the 4th match in the 3rd round.\n   *\n   * @param groupId ID of the group.\n   * @param roundNumber Number of the round in its parent group.\n   * @param matchNumber Number of the match in its parent round.\n   */\n  async findMatch(groupId, roundNumber, matchNumber) {\n    const round = await this.storage.selectFirst('round', {\n      group_id: groupId,\n      number: roundNumber\n    });\n    if (!round) throw Error('Round not found.');\n    const match = await this.storage.selectFirst('match', {\n      round_id: round.id,\n      number: matchNumber\n    });\n    if (!match) throw Error('Match not found.');\n    return match;\n  }\n  /**\n   * Finds a match game based on its `id` or based on the combination of its `parent_id` and `number`.\n   *\n   * @param game Values to change in a match game.\n   */\n  async findMatchGame(game) {\n    if (game.id !== undefined) {\n      const stored = await this.storage.select('match_game', game.id);\n      if (!stored) throw Error('Match game not found.');\n      return stored;\n    }\n    if (game.parent_id !== undefined && game.number) {\n      const stored = await this.storage.selectFirst('match_game', {\n        parent_id: game.parent_id,\n        number: game.number\n      });\n      if (!stored) throw Error('Match game not found.');\n      return stored;\n    }\n    throw Error('No match game id nor parent id and number given.');\n  }\n}\nexports.BaseGetter = BaseGetter;","map":{"version":3,"names":["helpers","require","BaseGetter","constructor","storage","getOrderedRounds","stage","settings","size","Error","type","getOrderedRoundsSingleElimination","id","getOrderedRoundsDoubleElimination","stageId","getUpperBracketFirstRound","rounds","select","stage_id","loserBracket","getLoserBracket","firstRoundWB","roundsLB","filter","r","group_id","orderedRoundsLB","isOrderingSupportedLoserBracket","number","length","getRoundPositionalInfo","roundId","round","roundNumber","roundCount","getPreviousMatches","match","matchLocation","getPreviousMatchesLB","getPreviousMatchesFinal","getMatchesBeforeMajorRound","getPreviousMatchesFinalSingleElimination","getPreviousMatchesFinalDoubleElimination","upperBracket","getUpperBracket","upperBracketRoundCount","getUpperBracketRoundCount","semiFinalsRound","selectFirst","semiFinalMatches","round_id","findMatch","winnerBracket","lastRoundWB","getLastRound","winnerBracketFinalMatch","lastRoundLB","loserBracketFinalMatch","skipFirstRound","hasBye","actualRoundNumberWB","Math","ceil","roundNumberWB","getMatchesBeforeFirstRoundLB","isMajorRound","getMatchesBeforeMinorRoundLB","winnerBracketId","getOriginPosition","matchNumber","getNextMatches","getNextMatchesUpperBracket","getNextMatchesWB","getNextMatchesLB","getNextMatchesFinal","actualRoundNumber","roundNumberLB","participantCount","method","getLoserOrdering","seedOrdering","actualMatchNumberLB","findLoserMatchNumber","getNextMatchesUpperBracketSingleElimination","getNextMatchesUpperBracketDoubleElimination","stageType","finalGroupId","getFinalGroupId","consolationFinal","getFinalGroupFirstMatch","getDiagonalMatch","getConsolationFinalMatchDoubleElimination","getMatchAfterMajorRoundLB","grandFinal","getMatchAfterMinorRoundLB","getParallelMatch","getSeedingOrdering","create","getRoundRobinOrdering","getStandardBracketFirstRoundOrdering","getSeedingMatches","firstRound","groupId","selectLast","groupNumber","finalGroup","getDiagonalMatchNumber","findMatchGame","game","undefined","stored","parent_id","exports"],"sources":["../../src/base/getter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}