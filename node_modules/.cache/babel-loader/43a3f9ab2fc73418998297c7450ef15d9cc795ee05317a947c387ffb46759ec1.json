{"ast":null,"code":"var _jsxFileName = \"C:\\\\programming\\\\github\\\\Clash\\\\Frontend\\\\src\\\\Pages\\\\CreateAccount.js\",\n  _s = $RefreshSig$();\n/*import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nfunction CreatePost() {\r\n  const initialValues = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password_hash: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"You must input a username!\"),\r\n    email: Yup.string().required(),\r\n    password_hash: Yup.string().min(3).max(15).required(),\r\n  });\r\n\r\n  const onSubmit = (data) => {\r\n    axios.post(\"http://localhost:3001/users\", data).then((response) => {\r\n      console.log(\"IT WORKED\");\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"createPostPage\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <Form className=\"formContainer\">\r\n          <label>username: </label>\r\n          <ErrorMessage name=\"username\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"username\"\r\n            placeholder=\"(Ex. username...)\"\r\n          />\r\n          <label>email: </label>\r\n          <ErrorMessage name=\"email\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"email\"\r\n            placeholder=\"(Ex. email...)\"\r\n          />\r\n          <label>password_hash: </label>\r\n          <ErrorMessage name=\"password_hash\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"password_hash\"\r\n            placeholder=\"(Ex. John123...)\"\r\n          />\r\n\r\n          <button type=\"submit\"> Create Post</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreatePost;*/\n\n// MultiStepForm.js\n// MultiStepForm.js\nimport React, { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios'; // Import Axios for making HTTP requests\nimport Step1 from './Step1';\nimport Step2 from './Step2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  firstName: '',\n  email: ''\n  // add other fields for each step\n};\nconst totalSteps = 2;\nconst validationSchemaStep1 = Yup.object({\n  firstName: Yup.string().required('Required')\n  // add validation for other fields in Step 1\n});\nconst validationSchemaStep2 = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required')\n  // add validation for other fields in Step 2\n});\nconst CreateAccount = () => {\n  _s();\n  const [step, setStep] = useState(1);\n  const [formValues, setFormValues] = useState(initialValues);\n  const nextStep = () => setStep(step + 1);\n  const prevStep = () => setStep(step - 1);\n  const validationSchema = step === 1 ? validationSchemaStep1 : validationSchemaStep2;\n  const handleChange = values => {\n    setFormValues(prevValues => ({\n      ...prevValues,\n      ...values\n    }));\n  };\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      // Perform Axios post request to send data to the backend\n      await axios.post('your-backend-api-endpoint', formValues);\n      // Handle successful submission (e.g., show success message)\n      console.log('Form submitted successfully!');\n    } catch (error) {\n      // Handle submission error (e.g., show error message)\n      console.error('Error submitting form:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: formValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [step === 1 && /*#__PURE__*/_jsxDEV(Step1, {\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 26\n      }, this), step === 2 && /*#__PURE__*/_jsxDEV(Step2, {\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: prevStep,\n        disabled: step === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: nextStep,\n        disabled: step === totalSteps,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), step === totalSteps && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateAccount, \"A15s7NXvDhJoN0RyDNjgGqctCCE=\");\n_c = CreateAccount;\nexport default CreateAccount;\nvar _c;\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"names":["React","useState","Formik","Form","Field","ErrorMessage","Yup","axios","Step1","Step2","jsxDEV","_jsxDEV","initialValues","firstName","email","totalSteps","validationSchemaStep1","object","string","required","validationSchemaStep2","CreateAccount","_s","step","setStep","formValues","setFormValues","nextStep","prevStep","validationSchema","handleChange","values","prevValues","handleSubmit","setSubmitting","post","console","log","error","onSubmit","children","isSubmitting","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/programming/github/Clash/Frontend/src/Pages/CreateAccount.js"],"sourcesContent":["/*import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nfunction CreatePost() {\r\n  const initialValues = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password_hash: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"You must input a username!\"),\r\n    email: Yup.string().required(),\r\n    password_hash: Yup.string().min(3).max(15).required(),\r\n  });\r\n\r\n  const onSubmit = (data) => {\r\n    axios.post(\"http://localhost:3001/users\", data).then((response) => {\r\n      console.log(\"IT WORKED\");\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"createPostPage\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <Form className=\"formContainer\">\r\n          <label>username: </label>\r\n          <ErrorMessage name=\"username\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"username\"\r\n            placeholder=\"(Ex. username...)\"\r\n          />\r\n          <label>email: </label>\r\n          <ErrorMessage name=\"email\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"email\"\r\n            placeholder=\"(Ex. email...)\"\r\n          />\r\n          <label>password_hash: </label>\r\n          <ErrorMessage name=\"password_hash\" component=\"span\" />\r\n          <Field\r\n            autocomplete=\"off\"\r\n            id=\"inputCreatePost\"\r\n            name=\"password_hash\"\r\n            placeholder=\"(Ex. John123...)\"\r\n          />\r\n\r\n          <button type=\"submit\"> Create Post</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreatePost;*/\r\n\r\n\r\n\r\n// MultiStepForm.js\r\n// MultiStepForm.js\r\nimport React, { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios'; // Import Axios for making HTTP requests\r\nimport Step1 from './Step1';\r\nimport Step2 from './Step2';\r\n\r\nconst initialValues = {\r\n  firstName: '',\r\n  email: '',\r\n  // add other fields for each step\r\n};\r\n\r\nconst totalSteps = 2;\r\n\r\nconst validationSchemaStep1 = Yup.object({\r\n  firstName: Yup.string().required('Required'),\r\n  // add validation for other fields in Step 1\r\n});\r\n\r\nconst validationSchemaStep2 = Yup.object({\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  // add validation for other fields in Step 2\r\n});\r\n\r\nconst CreateAccount = () => {\r\n  const [step, setStep] = useState(1);\r\n  const [formValues, setFormValues] = useState(initialValues);\r\n\r\n  const nextStep = () => setStep(step + 1);\r\n  const prevStep = () => setStep(step - 1);\r\n\r\n  const validationSchema = step === 1 ? validationSchemaStep1 : validationSchemaStep2;\r\n\r\n  const handleChange = (values) => {\r\n    setFormValues((prevValues) => ({ ...prevValues, ...values }));\r\n  };\r\n\r\n  const handleSubmit = async (values, { setSubmitting }) => {\r\n    try {\r\n      // Perform Axios post request to send data to the backend\r\n      await axios.post('your-backend-api-endpoint', formValues);\r\n      // Handle successful submission (e.g., show success message)\r\n      console.log('Form submitted successfully!');\r\n    } catch (error) {\r\n      // Handle submission error (e.g., show error message)\r\n      console.error('Error submitting form:', error);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={formValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          {step === 1 && <Step1 onChange={handleChange} />}\r\n          {step === 2 && <Step2 onChange={handleChange} />}\r\n          {/* render other steps */}\r\n          <button type=\"button\" onClick={prevStep} disabled={step === 1}>\r\n            Previous\r\n          </button>\r\n          <button type=\"button\" onClick={nextStep} disabled={step === totalSteps}>\r\n            Next\r\n          </button>\r\n          {step === totalSteps && (\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          )}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default CreateAccount;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}