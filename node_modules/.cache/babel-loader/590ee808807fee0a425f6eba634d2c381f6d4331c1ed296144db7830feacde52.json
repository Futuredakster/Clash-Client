{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setExtraFields = exports.resetMatchResults = exports.setMatchResults = exports.getMatchStatus = exports.hasBye = exports.isMatchParticipantLocked = exports.isMatchUpdateLocked = exports.isMatchByeCompleted = exports.isMatchWinCompleted = exports.isMatchDrawCompleted = exports.isMatchResultCompleted = exports.isMatchForfeitCompleted = exports.isMatchStale = exports.isMatchOngoing = exports.isMatchCompleted = exports.isMatchStarted = exports.isMatchPending = exports.getOtherSide = exports.getSide = exports.isParticipantInMatch = exports.findPosition = exports.getMatchResult = exports.byeLoser = exports.byeWinnerToGrandFinal = exports.byeWinner = exports.getLoser = exports.getWinner = exports.toResultWithPosition = exports.toResult = exports.convertTBDtoBYE = exports.ensureNotTied = exports.ensureValidSize = exports.isPowerOfTwo = exports.fixSeeding = exports.ensureEquallySized = exports.ensureNoDuplicates = exports.ensureEvenSized = exports.makePairs = exports.setArraySize = exports.normalizeParticipant = exports.makeNormalizedIdMapping = exports.normalizeIds = exports.balanceByes = exports.makeGroups = exports.assertRoundRobin = exports.makeRoundRobinDistribution = exports.makeRoundRobinMatches = exports.splitByParity = exports.splitBy = exports.isDefined = void 0;\nexports.getLowerBracketRoundCount = exports.getLoserOrdering = exports.getLoserCountFromWbForLbRound = exports.getLoserRoundMatchCount = exports.findLoserMatchNumber = exports.isDoubleEliminationNecessary = exports.getRoundPairCount = exports.getUpperBracketRoundCount = exports.isOrderingSupportedLoserBracket = exports.isOrderingSupportedUpperBracket = exports.ensureOrderingSupported = exports.getSeedCount = exports.getSeeds = exports.getChildGamesResults = exports.getUpdatedMatchResults = exports.getParentMatchResults = exports.setParentMatchCompleted = exports.transitionToMinor = exports.transitionToMajor = exports.isMinorRound = exports.isMajorRound = exports.uniqueBy = exports.getNonNull = exports.sortSeeding = exports.convertSlotsToSeeding = exports.convertMatchesToSeeding = exports.mapParticipantsToDatabase = exports.mapParticipantsIdsToDatabase = exports.mapParticipantsNamesToDatabase = exports.extractParticipantsFromSeeding = exports.isSeedingWithIds = exports.setForfeits = exports.setResults = exports.setCompleted = exports.getInferredResult = exports.setScores = exports.invertOpponents = exports.handleGivenStatus = exports.handleOpponentsInversion = exports.resetNextOpponent = exports.setNextOpponent = exports.getNextSideConsolationFinalDoubleElimination = exports.getNextSideLoserBracket = exports.getNextSide = exports.findParticipant = exports.getGrandFinalDecisiveMatch = exports.makeFinalStandings = exports.getLosers = exports.getOriginPosition = exports.getOpponentId = void 0;\nexports.getFractionOfFinal = exports.getMatchLocation = exports.isFinalGroup = exports.isLoserBracket = exports.isWinnerBracket = exports.isRoundCompleted = exports.ensureNotRoundRobin = exports.isRoundRobin = exports.minScoreToWinBestOfX = exports.getNearestPowerOfTwo = exports.getDiagonalMatchNumber = void 0;\nconst brackets_model_1 = require(\"brackets-model\");\nconst ordering_1 = require(\"./ordering\");\n/**\n * Checks whether a value is defined (i.e. not null nor undefined).\n *\n * @param value The value to check.\n */\nfunction isDefined(value) {\n  return value !== null && value !== undefined;\n}\nexports.isDefined = isDefined;\n/**\n * Splits an array of objects based on their values at a given key.\n *\n * @param objects The array to split.\n * @param key The key of T.\n */\nfunction splitBy(objects, key) {\n  const map = {};\n  for (const obj of objects) {\n    const commonValue = obj[key];\n    if (!map[commonValue]) map[commonValue] = [];\n    map[commonValue].push(obj);\n  }\n  return Object.values(map);\n}\nexports.splitBy = splitBy;\n/**\n * Splits an array in two parts: one with even indices and the other with odd indices.\n *\n * @param array The array to split.\n */\nfunction splitByParity(array) {\n  return {\n    even: array.filter((_, i) => i % 2 === 0),\n    odd: array.filter((_, i) => i % 2 === 1)\n  };\n}\nexports.splitByParity = splitByParity;\n/**\n * Makes a list of rounds containing the matches of a round-robin group.\n *\n * @param participants The participants to distribute.\n * @param mode The round-robin mode.\n */\nfunction makeRoundRobinMatches(participants, mode = 'simple') {\n  const distribution = makeRoundRobinDistribution(participants);\n  if (mode === 'simple') return distribution;\n  // Reverse rounds and their content.\n  const symmetry = distribution.map(round => [...round].reverse()).reverse();\n  return [...distribution, ...symmetry];\n}\nexports.makeRoundRobinMatches = makeRoundRobinMatches;\n/**\n * Distributes participants in rounds for a round-robin group.\n *\n * Conditions:\n * - Each participant plays each other once.\n * - Each participant plays once in each round.\n *\n * @param participants The participants to distribute.\n */\nfunction makeRoundRobinDistribution(participants) {\n  const n = participants.length;\n  const n1 = n % 2 === 0 ? n : n + 1;\n  const roundCount = n1 - 1;\n  const matchPerRound = n1 / 2;\n  const rounds = [];\n  for (let roundId = 0; roundId < roundCount; roundId++) {\n    const matches = [];\n    for (let matchId = 0; matchId < matchPerRound; matchId++) {\n      if (matchId === 0 && n % 2 === 1) continue;\n      const opponentsIds = [(roundId - matchId - 1 + n1) % (n1 - 1), matchId === 0 ? n1 - 1 : (roundId + matchId) % (n1 - 1)];\n      matches.push([participants[opponentsIds[0]], participants[opponentsIds[1]]]);\n    }\n    rounds.push(matches);\n  }\n  return rounds;\n}\nexports.makeRoundRobinDistribution = makeRoundRobinDistribution;\n/**\n * A helper to assert our generated round-robin is correct.\n *\n * @param input The input seeding.\n * @param output The resulting distribution of seeds in groups.\n */\nfunction assertRoundRobin(input, output) {\n  const n = input.length;\n  const matchPerRound = Math.floor(n / 2);\n  const roundCount = n % 2 === 0 ? n - 1 : n;\n  if (output.length !== roundCount) throw Error('Round count is wrong');\n  if (!output.every(round => round.length === matchPerRound)) throw Error('Not every round has the good number of matches');\n  const checkAllOpponents = Object.fromEntries(input.map(element => [element, new Set()]));\n  for (const round of output) {\n    const checkUnique = new Set();\n    for (const match of round) {\n      if (match.length !== 2) throw Error('One match is not a pair');\n      if (checkUnique.has(match[0])) throw Error('This team is already playing');\n      checkUnique.add(match[0]);\n      if (checkUnique.has(match[1])) throw Error('This team is already playing');\n      checkUnique.add(match[1]);\n      if (checkAllOpponents[match[0]].has(match[1])) throw Error('The team has already matched this team');\n      checkAllOpponents[match[0]].add(match[1]);\n      if (checkAllOpponents[match[1]].has(match[0])) throw Error('The team has already matched this team');\n      checkAllOpponents[match[1]].add(match[0]);\n    }\n  }\n}\nexports.assertRoundRobin = assertRoundRobin;\n/**\n * Distributes elements in groups of equal size.\n *\n * @param elements A list of elements to distribute in groups.\n * @param groupCount The group count.\n */\nfunction makeGroups(elements, groupCount) {\n  const groupSize = Math.ceil(elements.length / groupCount);\n  const result = [];\n  for (let i = 0; i < elements.length; i++) {\n    if (i % groupSize === 0) result.push([]);\n    result[result.length - 1].push(elements[i]);\n  }\n  return result;\n}\nexports.makeGroups = makeGroups;\n/**\n * Balances BYEs to prevents having BYE against BYE in matches.\n *\n * @param seeding The seeding of the stage.\n * @param participantCount The number of participants in the stage.\n */\nfunction balanceByes(seeding, participantCount) {\n  seeding = seeding.filter(v => v !== null);\n  participantCount = participantCount || getNearestPowerOfTwo(seeding.length);\n  if (seeding.length < participantCount / 2) {\n    const flat = seeding.flatMap(v => [v, null]);\n    return setArraySize(flat, participantCount, null);\n  }\n  const nonNullCount = seeding.length;\n  const nullCount = participantCount - nonNullCount;\n  const againstEachOther = seeding.slice(0, nonNullCount - nullCount).filter((_, i) => i % 2 === 0).map((_, i) => [seeding[2 * i], seeding[2 * i + 1]]);\n  const againstNull = seeding.slice(nonNullCount - nullCount, nonNullCount).map(v => [v, null]);\n  const flat = [...againstEachOther.flat(), ...againstNull.flat()];\n  return setArraySize(flat, participantCount, null);\n}\nexports.balanceByes = balanceByes;\n/**\n * Normalizes IDs in a database.\n *\n * All IDs (and references to them) are remapped to consecutive IDs starting from 0.\n *\n * @param data Data to normalize.\n */\nfunction normalizeIds(data) {\n  const mappings = {\n    participant: makeNormalizedIdMapping(data.participant),\n    stage: makeNormalizedIdMapping(data.stage),\n    group: makeNormalizedIdMapping(data.group),\n    round: makeNormalizedIdMapping(data.round),\n    match: makeNormalizedIdMapping(data.match),\n    match_game: makeNormalizedIdMapping(data.match_game)\n  };\n  return {\n    participant: data.participant.map(value => ({\n      ...value,\n      id: mappings.participant[value.id]\n    })),\n    stage: data.stage.map(value => ({\n      ...value,\n      id: mappings.stage[value.id]\n    })),\n    group: data.group.map(value => ({\n      ...value,\n      id: mappings.group[value.id],\n      stage_id: mappings.stage[value.stage_id]\n    })),\n    round: data.round.map(value => ({\n      ...value,\n      id: mappings.round[value.id],\n      stage_id: mappings.stage[value.stage_id],\n      group_id: mappings.group[value.group_id]\n    })),\n    match: data.match.map(value => ({\n      ...value,\n      id: mappings.match[value.id],\n      stage_id: mappings.stage[value.stage_id],\n      group_id: mappings.group[value.group_id],\n      round_id: mappings.round[value.round_id],\n      opponent1: normalizeParticipant(value.opponent1, mappings.participant),\n      opponent2: normalizeParticipant(value.opponent2, mappings.participant)\n    })),\n    match_game: data.match_game.map(value => ({\n      ...value,\n      id: mappings.match_game[value.id],\n      stage_id: mappings.stage[value.stage_id],\n      parent_id: mappings.match[value.parent_id],\n      opponent1: normalizeParticipant(value.opponent1, mappings.participant),\n      opponent2: normalizeParticipant(value.opponent2, mappings.participant)\n    }))\n  };\n}\nexports.normalizeIds = normalizeIds;\n/**\n * Makes a mapping between old IDs and new normalized IDs.\n *\n * @param elements A list of elements with IDs.\n */\nfunction makeNormalizedIdMapping(elements) {\n  let currentId = 0;\n  return elements.reduce((acc, current) => ({\n    ...acc,\n    [current.id]: currentId++\n  }), {});\n}\nexports.makeNormalizedIdMapping = makeNormalizedIdMapping;\n/**\n * Apply a normalizing mapping to a participant.\n *\n * @param participant The participant.\n * @param mapping The mapping of IDs.\n */\nfunction normalizeParticipant(participant, mapping) {\n  if (participant === null) return null;\n  return {\n    ...participant,\n    id: participant.id !== null ? mapping[participant.id] : null\n  };\n}\nexports.normalizeParticipant = normalizeParticipant;\n/**\n * Sets the size of an array with a placeholder if the size is bigger.\n *\n * @param array The original array.\n * @param length The new length.\n * @param placeholder A placeholder to use to fill the empty space.\n */\nfunction setArraySize(array, length, placeholder) {\n  return Array.from({\n    length\n  }, (_, i) => array[i] || placeholder);\n}\nexports.setArraySize = setArraySize;\n/**\n * Makes pairs with each element and its next one.\n *\n * @example [1, 2, 3, 4] --> [[1, 2], [3, 4]]\n * @param array A list of elements.\n */\nfunction makePairs(array) {\n  return array.map((_, i) => i % 2 === 0 ? [array[i], array[i + 1]] : []).filter(v => v.length === 2);\n}\nexports.makePairs = makePairs;\n/**\n * Ensures that a list of elements has an even size.\n *\n * @param array A list of elements.\n */\nfunction ensureEvenSized(array) {\n  if (array.length % 2 === 1) throw Error('Array size must be even.');\n}\nexports.ensureEvenSized = ensureEvenSized;\n/**\n * Ensures there are no duplicates in a list of elements.\n *\n * @param array A list of elements.\n */\nfunction ensureNoDuplicates(array) {\n  const nonNull = getNonNull(array);\n  const unique = nonNull.filter((item, index) => {\n    const stringifiedItem = JSON.stringify(item);\n    return nonNull.findIndex(obj => JSON.stringify(obj) === stringifiedItem) === index;\n  });\n  if (unique.length < nonNull.length) throw new Error('The seeding has a duplicate participant.');\n}\nexports.ensureNoDuplicates = ensureNoDuplicates;\n/**\n * Ensures that two lists of elements have the same size.\n *\n * @param left The first list of elements.\n * @param right The second list of elements.\n */\nfunction ensureEquallySized(left, right) {\n  if (left.length !== right.length) throw Error('Arrays\\' size must be equal.');\n}\nexports.ensureEquallySized = ensureEquallySized;\n/**\n * Fixes the seeding by enlarging it if it's not complete.\n *\n * @param seeding The seeding of the stage.\n * @param participantCount The number of participants in the stage.\n */\nfunction fixSeeding(seeding, participantCount) {\n  if (seeding.length > participantCount) throw Error('The seeding has more participants than the size of the stage.');\n  if (seeding.length < participantCount) return setArraySize(seeding, participantCount, null);\n  return seeding;\n}\nexports.fixSeeding = fixSeeding;\n/**\n * Indicates whether a number is a power of two.\n *\n * @param number The number to test.\n */\nfunction isPowerOfTwo(number) {\n  return Number.isInteger(Math.log2(number));\n}\nexports.isPowerOfTwo = isPowerOfTwo;\n/**\n * Ensures that the participant count is valid.\n *\n * @param stageType Type of the stage to test.\n * @param participantCount The number to test.\n */\nfunction ensureValidSize(stageType, participantCount) {\n  if (participantCount === 0) throw Error('Impossible to create an empty stage. If you want an empty seeding, just set the size of the stage.');\n  if (participantCount < 2) throw Error('Impossible to create a stage with less than 2 participants.');\n  if (stageType === 'round_robin') {\n    // Round robin supports any number of participants.\n    return;\n  }\n  if (!isPowerOfTwo(participantCount)) throw Error('The library only supports a participant count which is a power of two.');\n}\nexports.ensureValidSize = ensureValidSize;\n/**\n * Ensures that a match scores aren't tied.\n *\n * @param scores Two numbers which are scores.\n */\nfunction ensureNotTied(scores) {\n  if (scores[0] === scores[1]) throw Error(`${scores[0]} and ${scores[1]} are tied. It cannot be.`);\n}\nexports.ensureNotTied = ensureNotTied;\n/**\n * Converts a TBD to a BYE.\n *\n * @param slot The slot to convert.\n */\nfunction convertTBDtoBYE(slot) {\n  if (slot === null) return null; // Already a BYE.\n  if ((slot === null || slot === void 0 ? void 0 : slot.id) === null) return null; // It's a TBD: make it a BYE.\n  return slot; // It's a determined participant.\n}\nexports.convertTBDtoBYE = convertTBDtoBYE;\n/**\n * Converts a participant slot to a result stored in storage.\n *\n * @param slot A participant slot.\n */\nfunction toResult(slot) {\n  return slot && {\n    id: slot.id\n  };\n}\nexports.toResult = toResult;\n/**\n * Converts a participant slot to a result stored in storage, with the position the participant is coming from.\n *\n * @param slot A participant slot.\n */\nfunction toResultWithPosition(slot) {\n  return slot && {\n    id: slot.id,\n    position: slot.position\n  };\n}\nexports.toResultWithPosition = toResultWithPosition;\n/**\n * Returns the winner of a match.\n *\n * @param match The match.\n */\nfunction getWinner(match) {\n  const winnerSide = getMatchResult(match);\n  if (!winnerSide) return null;\n  return match[winnerSide];\n}\nexports.getWinner = getWinner;\n/**\n * Returns the loser of a match.\n *\n * @param match The match.\n */\nfunction getLoser(match) {\n  const winnerSide = getMatchResult(match);\n  if (!winnerSide) return null;\n  return match[getOtherSide(winnerSide)];\n}\nexports.getLoser = getLoser;\n/**\n * Returns the pre-computed winner for a match because of BYEs.\n *\n * @param opponents Two opponents.\n */\nfunction byeWinner(opponents) {\n  if (opponents[0] === null && opponents[1] === null)\n    // Double BYE.\n    return null; // BYE.\n  if (opponents[0] === null && opponents[1] !== null)\n    // opponent1 BYE.\n    return {\n      id: opponents[1].id\n    }; // opponent2.\n  if (opponents[0] !== null && opponents[1] === null)\n    // opponent2 BYE.\n    return {\n      id: opponents[0].id\n    }; // opponent1.\n  return {\n    id: null\n  }; // Normal.\n}\nexports.byeWinner = byeWinner;\n/**\n * Returns the pre-computed winner for a match because of BYEs in a lower bracket.\n *\n * @param opponents Two opponents.\n */\nfunction byeWinnerToGrandFinal(opponents) {\n  const winner = byeWinner(opponents);\n  if (winner) winner.position = 1;\n  return winner;\n}\nexports.byeWinnerToGrandFinal = byeWinnerToGrandFinal;\n/**\n * Returns the pre-computed loser for a match because of BYEs.\n *\n * Only used for loser bracket.\n *\n * @param opponents Two opponents.\n * @param index The index of the duel in the round.\n */\nfunction byeLoser(opponents, index) {\n  if (opponents[0] === null || opponents[1] === null)\n    // At least one BYE.\n    return null; // BYE.\n  return {\n    id: null,\n    position: index + 1\n  }; // Normal.\n}\nexports.byeLoser = byeLoser;\n/**\n * Returns the winner side or `null` if no winner.\n *\n * @param match A match's results.\n */\nfunction getMatchResult(match) {\n  var _a, _b;\n  if (!isMatchCompleted(match)) return null;\n  if (isMatchDrawCompleted(match)) return null;\n  if (match.opponent1 === null && match.opponent2 === null) return null;\n  let winner = null;\n  if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.result) === 'win' || match.opponent2 === null || match.opponent2.forfeit) winner = 'opponent1';\n  if (((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.result) === 'win' || match.opponent1 === null || match.opponent1.forfeit) {\n    if (winner !== null) throw Error('There are two winners.');\n    winner = 'opponent2';\n  }\n  return winner;\n}\nexports.getMatchResult = getMatchResult;\n/**\n * Finds a position in a list of matches.\n *\n * @param matches A list of matches to search into.\n * @param position The position to find.\n */\nfunction findPosition(matches, position) {\n  var _a, _b;\n  for (const match of matches) {\n    if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.position) === position) return match.opponent1;\n    if (((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.position) === position) return match.opponent2;\n  }\n  return null;\n}\nexports.findPosition = findPosition;\n/**\n * Checks if a participant is involved in a given match.\n *\n * @param match A match.\n * @param participantId ID of a participant.\n */\nfunction isParticipantInMatch(match, participantId) {\n  return [match.opponent1, match.opponent2].some(m => (m === null || m === void 0 ? void 0 : m.id) === participantId);\n}\nexports.isParticipantInMatch = isParticipantInMatch;\n/**\n * Gets the side where the winner of the given match will go in the next match.\n *\n * @param matchNumber Number of the match.\n */\nfunction getSide(matchNumber) {\n  return matchNumber % 2 === 1 ? 'opponent1' : 'opponent2';\n}\nexports.getSide = getSide;\n/**\n * Gets the other side of a match.\n *\n * @param side The side that we don't want.\n */\nfunction getOtherSide(side) {\n  return side === 'opponent1' ? 'opponent2' : 'opponent1';\n}\nexports.getOtherSide = getOtherSide;\n/**\n * Checks if a match is pending (i.e. locked or waiting).\n *\n * [Locked > Waiting] > Ready > Running > Completed > Archived\n *\n * @param match Partial match results.\n */\nfunction isMatchPending(match) {\n  var _a, _b;\n  return !((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.id) || !((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.id); // At least one BYE or TBD\n}\nexports.isMatchPending = isMatchPending;\n/**\n * Checks if a match is started.\n *\n * Note: this is score-based. A completed or archived match is seen as \"started\" as well.\n *\n * Locked > Waiting > Ready > [Running > Completed > Archived]\n *\n * @param match Partial match results.\n */\nfunction isMatchStarted(match) {\n  var _a, _b;\n  return ((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.score) !== undefined || ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.score) !== undefined;\n}\nexports.isMatchStarted = isMatchStarted;\n/**\n * Checks if a match is completed (based on BYEs, forfeit or result).\n *\n * Note: archived matches are not seen as completed by this helper.\n *\n * Locked > Waiting > Ready > Running > [Completed] > Archived\n *\n * @param match Partial match results.\n */\nfunction isMatchCompleted(match) {\n  return isMatchByeCompleted(match) || isMatchForfeitCompleted(match) || isMatchResultCompleted(match);\n}\nexports.isMatchCompleted = isMatchCompleted;\n/**\n * Checks if a match is ongoing (i.e. ready or running).\n *\n * Locked > Waiting > [Ready > Running] > Completed > Archived\n *\n * @param match Partial match results.\n */\nfunction isMatchOngoing(match) {\n  return [brackets_model_1.Status.Ready, brackets_model_1.Status.Running].includes(match.status);\n}\nexports.isMatchOngoing = isMatchOngoing;\n/**\n * Checks if a match is stale (i.e. it should not change anymore).\n *\n * [Locked - BYE] > Waiting > Ready > Running > [Completed > Archived]\n *\n * @param match Partial match results.\n */\nfunction isMatchStale(match) {\n  return match.status >= brackets_model_1.Status.Completed || isMatchByeCompleted(match);\n}\nexports.isMatchStale = isMatchStale;\n/**\n * Checks if a match is completed because of a forfeit.\n *\n * @param match Partial match results.\n */\nfunction isMatchForfeitCompleted(match) {\n  var _a, _b;\n  return ((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.forfeit) !== undefined || ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.forfeit) !== undefined;\n}\nexports.isMatchForfeitCompleted = isMatchForfeitCompleted;\n/**\n * Checks if a match is completed because of a either a draw or a win.\n *\n * @param match Partial match results.\n */\nfunction isMatchResultCompleted(match) {\n  return isMatchDrawCompleted(match) || isMatchWinCompleted(match);\n}\nexports.isMatchResultCompleted = isMatchResultCompleted;\n/**\n * Checks if a match is completed because of a draw.\n *\n * @param match Partial match results.\n */\nfunction isMatchDrawCompleted(match) {\n  var _a, _b;\n  return ((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.result) === 'draw' && ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.result) === 'draw';\n}\nexports.isMatchDrawCompleted = isMatchDrawCompleted;\n/**\n * Checks if a match is completed because of a win.\n *\n * @param match Partial match results.\n */\nfunction isMatchWinCompleted(match) {\n  var _a, _b, _c, _d;\n  return ((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.result) === 'win' || ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.result) === 'win' || ((_c = match.opponent1) === null || _c === void 0 ? void 0 : _c.result) === 'loss' || ((_d = match.opponent2) === null || _d === void 0 ? void 0 : _d.result) === 'loss';\n}\nexports.isMatchWinCompleted = isMatchWinCompleted;\n/**\n * Checks if a match is completed because of at least one BYE.\n *\n * A match \"BYE vs. TBD\" isn't considered completed yet.\n *\n * @param match Partial match results.\n */\nfunction isMatchByeCompleted(match) {\n  var _a, _b;\n  return match.opponent1 === null && ((_a = match.opponent2) === null || _a === void 0 ? void 0 : _a.id) !== null // BYE vs. someone\n  || match.opponent2 === null && ((_b = match.opponent1) === null || _b === void 0 ? void 0 : _b.id) !== null // someone vs. BYE\n  || match.opponent1 === null && match.opponent2 === null; // BYE vs. BYE\n}\nexports.isMatchByeCompleted = isMatchByeCompleted;\n/**\n * Checks if a match's results can't be updated.\n *\n * @param match The match to check.\n */\nfunction isMatchUpdateLocked(match) {\n  return match.status === brackets_model_1.Status.Locked || match.status === brackets_model_1.Status.Waiting || match.status === brackets_model_1.Status.Archived || isMatchByeCompleted(match);\n}\nexports.isMatchUpdateLocked = isMatchUpdateLocked;\n/**\n * Checks if a match's participants can't be updated.\n *\n * @param match The match to check.\n */\nfunction isMatchParticipantLocked(match) {\n  return match.status >= brackets_model_1.Status.Running;\n}\nexports.isMatchParticipantLocked = isMatchParticipantLocked;\n/**\n * Indicates whether a match has at least one BYE or not.\n *\n * @param match Partial match results.\n */\nfunction hasBye(match) {\n  return match.opponent1 === null || match.opponent2 === null;\n}\nexports.hasBye = hasBye;\n/**\n * Returns the status of a match based on information about it.\n *\n * @param arg The opponents or partial results of the match.\n */\nfunction getMatchStatus(arg) {\n  var _a, _b, _c, _d;\n  const match = Array.isArray(arg) ? {\n    opponent1: arg[0],\n    opponent2: arg[1]\n  } : arg;\n  if (hasBye(match))\n    // At least one BYE.\n    return brackets_model_1.Status.Locked;\n  if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.id) === null && ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.id) === null)\n    // Two TBD opponents.\n    return brackets_model_1.Status.Locked;\n  if (((_c = match.opponent1) === null || _c === void 0 ? void 0 : _c.id) === null || ((_d = match.opponent2) === null || _d === void 0 ? void 0 : _d.id) === null)\n    // One TBD opponent.\n    return brackets_model_1.Status.Waiting;\n  if (isMatchCompleted(match)) return brackets_model_1.Status.Completed;\n  if (isMatchStarted(match)) return brackets_model_1.Status.Running;\n  return brackets_model_1.Status.Ready;\n}\nexports.getMatchStatus = getMatchStatus;\n/**\n * Updates a match results based on an input.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n * @param inRoundRobin Indicates whether the match is in a round-robin stage.\n */\nfunction setMatchResults(stored, match, inRoundRobin) {\n  var _a, _b;\n  handleGivenStatus(stored, match);\n  if (!inRoundRobin && (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.result) === 'draw' || ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.result) === 'draw')) throw Error('Having a draw is forbidden in an elimination tournament.');\n  const completed = isMatchCompleted(match);\n  const currentlyCompleted = isMatchCompleted(stored);\n  setExtraFields(stored, match);\n  handleOpponentsInversion(stored, match);\n  const statusChanged = setScores(stored, match);\n  if (completed && currentlyCompleted) {\n    // Ensure everything is good.\n    setCompleted(stored, match, inRoundRobin);\n    return {\n      statusChanged: false,\n      resultChanged: true\n    };\n  }\n  if (completed && !currentlyCompleted) {\n    setCompleted(stored, match, inRoundRobin);\n    return {\n      statusChanged: true,\n      resultChanged: true\n    };\n  }\n  if (!completed && currentlyCompleted) {\n    resetMatchResults(stored);\n    return {\n      statusChanged: true,\n      resultChanged: true\n    };\n  }\n  return {\n    statusChanged,\n    resultChanged: false\n  };\n}\nexports.setMatchResults = setMatchResults;\n/**\n * Resets the results of a match. (status, forfeit, result)\n *\n * @param stored A reference to what will be updated in the storage.\n */\nfunction resetMatchResults(stored) {\n  if (stored.opponent1) {\n    stored.opponent1.forfeit = undefined;\n    stored.opponent1.result = undefined;\n  }\n  if (stored.opponent2) {\n    stored.opponent2.forfeit = undefined;\n    stored.opponent2.result = undefined;\n  }\n  stored.status = getMatchStatus(stored);\n}\nexports.resetMatchResults = resetMatchResults;\n/**\n * Passes user-defined extra fields to the stored match.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n */\nfunction setExtraFields(stored, match) {\n  const partialAssign = (target, update, ignoredKeys) => {\n    if (!target || !update) return;\n    const retainedKeys = Object.keys(update).filter(key => !ignoredKeys.includes(key));\n    retainedKeys.forEach(key => {\n      target[key] = update[key];\n    });\n  };\n  const ignoredKeys = ['id', 'number', 'stage_id', 'group_id', 'round_id', 'status', 'opponent1', 'opponent2', 'child_count', 'parent_id'];\n  const ignoredOpponentKeys = ['id', 'score', 'position', 'forfeit', 'result'];\n  partialAssign(stored, match, ignoredKeys);\n  partialAssign(stored.opponent1, match.opponent1, ignoredOpponentKeys);\n  partialAssign(stored.opponent2, match.opponent2, ignoredOpponentKeys);\n}\nexports.setExtraFields = setExtraFields;\n/**\n * Gets the id of the opponent at the given side of the given match.\n *\n * @param match The match to get the opponent from.\n * @param side The side where to get the opponent from.\n */\nfunction getOpponentId(match, side) {\n  const opponent = match[side];\n  return opponent && opponent.id;\n}\nexports.getOpponentId = getOpponentId;\n/**\n * Gets the origin position of a side of a match.\n *\n * @param match The match.\n * @param side The side.\n */\nfunction getOriginPosition(match, side) {\n  var _a;\n  const matchNumber = (_a = match[side]) === null || _a === void 0 ? void 0 : _a.position;\n  if (matchNumber === undefined) throw Error('Position is undefined.');\n  return matchNumber;\n}\nexports.getOriginPosition = getOriginPosition;\n/**\n * Returns every loser in a list of matches.\n *\n * @param participants The list of participants.\n * @param matches A list of matches to get losers of.\n */\nfunction getLosers(participants, matches) {\n  const losers = [];\n  let currentRound = null;\n  let roundIndex = -1;\n  for (const match of matches) {\n    if (match.round_id !== currentRound) {\n      currentRound = match.round_id;\n      roundIndex++;\n      losers[roundIndex] = [];\n    }\n    const loser = getLoser(match);\n    if (loser === null) continue;\n    losers[roundIndex].push(findParticipant(participants, loser));\n  }\n  return losers;\n}\nexports.getLosers = getLosers;\n/**\n * Makes final standings based on participants grouped by ranking.\n *\n * @param grouped A list of participants grouped by ranking.\n */\nfunction makeFinalStandings(grouped) {\n  const standings = [];\n  let rank = 1;\n  for (const group of grouped) {\n    for (const participant of group) {\n      standings.push({\n        id: participant.id,\n        name: participant.name,\n        rank\n      });\n    }\n    rank++;\n  }\n  return standings;\n}\nexports.makeFinalStandings = makeFinalStandings;\n/**\n * Returns the decisive match of a Grand Final.\n *\n * @param type The type of Grand Final.\n * @param matches The matches in the Grand Final.\n */\nfunction getGrandFinalDecisiveMatch(type, matches) {\n  if (type === 'simple') return matches[0];\n  if (type === 'double') {\n    const result = getMatchResult(matches[0]);\n    if (result === 'opponent2') return matches[1];\n    return matches[0];\n  }\n  throw Error('The Grand Final is disabled.');\n}\nexports.getGrandFinalDecisiveMatch = getGrandFinalDecisiveMatch;\n/**\n * Finds a participant in a list.\n *\n * @param participants The list of participants.\n * @param slot The slot of the participant to find.\n */\nfunction findParticipant(participants, slot) {\n  if (!slot) throw Error('Cannot find a BYE participant.');\n  const participant = participants.find(participant => participant.id === (slot === null || slot === void 0 ? void 0 : slot.id));\n  if (!participant) throw Error('Participant not found.');\n  return participant;\n}\nexports.findParticipant = findParticipant;\n/**\n * Gets the side the winner of the current match will go to in the next match.\n *\n * @param matchNumber Number of the current match.\n * @param roundNumber Number of the current round.\n * @param roundCount Count of rounds.\n * @param matchLocation Location of the current match.\n */\nfunction getNextSide(matchNumber, roundNumber, roundCount, matchLocation) {\n  // The nextSide comes from the same bracket.\n  if (matchLocation === 'loser_bracket' && roundNumber % 2 === 1) return 'opponent2';\n  // The nextSide comes from the loser bracket to the final group.\n  if (matchLocation === 'loser_bracket' && roundNumber === roundCount) return 'opponent2';\n  return getSide(matchNumber);\n}\nexports.getNextSide = getNextSide;\n/**\n * Gets the side the winner of the current match in loser bracket will go in the next match.\n *\n * @param matchNumber Number of the match.\n * @param nextMatch The next match.\n * @param roundNumber Number of the current round.\n */\nfunction getNextSideLoserBracket(matchNumber, nextMatch, roundNumber) {\n  var _a;\n  // The nextSide comes from the WB.\n  if (roundNumber > 1) return 'opponent1';\n  // The nextSide comes from the WB round 1. \n  if (((_a = nextMatch.opponent1) === null || _a === void 0 ? void 0 : _a.position) === matchNumber) return 'opponent1';\n  return 'opponent2';\n}\nexports.getNextSideLoserBracket = getNextSideLoserBracket;\n/**\n * Gets the side the loser of the current match in loser bracket will go in the next match.\n *\n * @param roundNumber Number of the current round.\n */\nfunction getNextSideConsolationFinalDoubleElimination(roundNumber) {\n  return isMajorRound(roundNumber) ? 'opponent1' : 'opponent2';\n}\nexports.getNextSideConsolationFinalDoubleElimination = getNextSideConsolationFinalDoubleElimination;\n/**\n * Sets an opponent in the next match he has to go.\n *\n * @param nextMatch A match which follows the current one.\n * @param nextSide The side the opponent will be on in the next match.\n * @param match The current match.\n * @param currentSide The side the opponent is currently on.\n */\nfunction setNextOpponent(nextMatch, nextSide, match, currentSide) {\n  var _a;\n  nextMatch[nextSide] = match[currentSide] && {\n    id: getOpponentId(match, currentSide),\n    position: (_a = nextMatch[nextSide]) === null || _a === void 0 ? void 0 : _a.position // Keep position.\n  };\n  nextMatch.status = getMatchStatus(nextMatch);\n}\nexports.setNextOpponent = setNextOpponent;\n/**\n * Resets an opponent in the match following the current one.\n *\n * @param nextMatch A match which follows the current one.\n * @param nextSide The side the opponent will be on in the next match.\n */\nfunction resetNextOpponent(nextMatch, nextSide) {\n  var _a;\n  nextMatch[nextSide] = nextMatch[nextSide] && {\n    id: null,\n    position: (_a = nextMatch[nextSide]) === null || _a === void 0 ? void 0 : _a.position // Keep position.\n  };\n  nextMatch.status = brackets_model_1.Status.Locked;\n}\nexports.resetNextOpponent = resetNextOpponent;\n/**\n * Inverts opponents if requested by the input.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n */\nfunction handleOpponentsInversion(stored, match) {\n  var _a, _b, _c, _d;\n  const id1 = (_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.id;\n  const id2 = (_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.id;\n  const storedId1 = (_c = stored.opponent1) === null || _c === void 0 ? void 0 : _c.id;\n  const storedId2 = (_d = stored.opponent2) === null || _d === void 0 ? void 0 : _d.id;\n  if (isDefined(id1) && id1 !== storedId1 && id1 !== storedId2) throw Error('The given opponent1 ID does not exist in this match.');\n  if (isDefined(id2) && id2 !== storedId1 && id2 !== storedId2) throw Error('The given opponent2 ID does not exist in this match.');\n  if (isDefined(id1) && id1 === storedId2 || isDefined(id2) && id2 === storedId1) invertOpponents(match);\n}\nexports.handleOpponentsInversion = handleOpponentsInversion;\n/**\n * Sets the `result` of both opponents based on their scores.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n */\nfunction handleGivenStatus(stored, match) {\n  var _a, _b, _c, _d;\n  if (match.status === brackets_model_1.Status.Running) {\n    (_a = stored.opponent1) === null || _a === void 0 ? true : delete _a.result;\n    (_b = stored.opponent2) === null || _b === void 0 ? true : delete _b.result;\n    stored.status = brackets_model_1.Status.Running;\n  } else if (match.status === brackets_model_1.Status.Completed) {\n    if (((_c = match.opponent1) === null || _c === void 0 ? void 0 : _c.score) === undefined || ((_d = match.opponent2) === null || _d === void 0 ? void 0 : _d.score) === undefined) return;\n    if (match.opponent1.score > match.opponent2.score) match.opponent1.result = 'win';else if (match.opponent2.score > match.opponent1.score) match.opponent2.result = 'win';else {\n      // This will throw in an elimination stage.\n      match.opponent1.result = 'draw';\n      match.opponent2.result = 'draw';\n    }\n    stored.status = brackets_model_1.Status.Completed;\n  }\n}\nexports.handleGivenStatus = handleGivenStatus;\n/**\n * Inverts `opponent1` and `opponent2` in a match.\n *\n * @param match A match to update.\n */\nfunction invertOpponents(match) {\n  [match.opponent1, match.opponent2] = [match.opponent2, match.opponent1];\n}\nexports.invertOpponents = invertOpponents;\n/**\n * Updates the scores of a match.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n * @returns `true` if the status of the match changed, `false` otherwise.\n */\nfunction setScores(stored, match) {\n  var _a, _b, _c, _d;\n  // Skip if no score update.\n  if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.score) === ((_b = stored.opponent1) === null || _b === void 0 ? void 0 : _b.score) && ((_c = match.opponent2) === null || _c === void 0 ? void 0 : _c.score) === ((_d = stored.opponent2) === null || _d === void 0 ? void 0 : _d.score)) return false;\n  const oldStatus = stored.status;\n  stored.status = brackets_model_1.Status.Running;\n  if (match.opponent1 && stored.opponent1) stored.opponent1.score = match.opponent1.score;\n  if (match.opponent2 && stored.opponent2) stored.opponent2.score = match.opponent2.score;\n  return stored.status !== oldStatus;\n}\nexports.setScores = setScores;\n/**\n * Infers the win result based on BYEs.\n *\n * @param opponent1 Opponent 1.\n * @param opponent2 Opponent 2.\n */\nfunction getInferredResult(opponent1, opponent2) {\n  if (opponent1 && !opponent2)\n    // someone vs. BYE\n    return {\n      opponent1: {\n        ...opponent1,\n        result: 'win'\n      },\n      opponent2: null\n    };\n  if (!opponent1 && opponent2)\n    // BYE vs. someone\n    return {\n      opponent1: null,\n      opponent2: {\n        ...opponent2,\n        result: 'win'\n      }\n    };\n  return {\n    opponent1,\n    opponent2\n  }; // Do nothing if both BYE or both someone\n}\nexports.getInferredResult = getInferredResult;\n/**\n * Completes a match and handles results and forfeits.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n * @param inRoundRobin Indicates whether the match is in a round-robin stage.\n */\nfunction setCompleted(stored, match, inRoundRobin) {\n  stored.status = brackets_model_1.Status.Completed;\n  setResults(stored, match, 'win', 'loss', inRoundRobin);\n  setResults(stored, match, 'loss', 'win', inRoundRobin);\n  setResults(stored, match, 'draw', 'draw', inRoundRobin);\n  const {\n    opponent1,\n    opponent2\n  } = getInferredResult(stored.opponent1, stored.opponent2);\n  stored.opponent1 = opponent1;\n  stored.opponent2 = opponent2;\n  setForfeits(stored, match);\n}\nexports.setCompleted = setCompleted;\n/**\n * Enforces the symmetry between opponents.\n *\n * Sets an opponent's result to something, based on the result on the other opponent.\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n * @param check A result to check in each opponent.\n * @param change A result to set in each other opponent if `check` is correct.\n * @param inRoundRobin Indicates whether the match is in a round-robin stage.\n */\nfunction setResults(stored, match, check, change, inRoundRobin) {\n  var _a, _b;\n  if (match.opponent1 && match.opponent2) {\n    if (match.opponent1.result === 'win' && match.opponent2.result === 'win') throw Error('There are two winners.');\n    if (match.opponent1.result === 'loss' && match.opponent2.result === 'loss') throw Error('There are two losers.');\n    if (!inRoundRobin && match.opponent1.forfeit === true && match.opponent2.forfeit === true) throw Error('There are two forfeits.');\n  }\n  if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.result) === check) {\n    if (stored.opponent1) stored.opponent1.result = check;else stored.opponent1 = {\n      id: null,\n      result: check\n    };\n    if (stored.opponent2) stored.opponent2.result = change;else stored.opponent2 = {\n      id: null,\n      result: change\n    };\n  }\n  if (((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.result) === check) {\n    if (stored.opponent2) stored.opponent2.result = check;else stored.opponent2 = {\n      id: null,\n      result: check\n    };\n    if (stored.opponent1) stored.opponent1.result = change;else stored.opponent1 = {\n      id: null,\n      result: change\n    };\n  }\n}\nexports.setResults = setResults;\n/**\n * Sets forfeits for each opponent (if needed).\n *\n * @param stored A reference to what will be updated in the storage.\n * @param match Input of the update.\n */\nfunction setForfeits(stored, match) {\n  var _a, _b, _c, _d;\n  if (((_a = match.opponent1) === null || _a === void 0 ? void 0 : _a.forfeit) === true && ((_b = match.opponent2) === null || _b === void 0 ? void 0 : _b.forfeit) === true) {\n    if (stored.opponent1) stored.opponent1.forfeit = true;\n    if (stored.opponent2) stored.opponent2.forfeit = true;\n    // Don't set any result (win/draw/loss) with a double forfeit \n    // so that it doesn't count any point in the ranking.\n    return;\n  }\n  if (((_c = match.opponent1) === null || _c === void 0 ? void 0 : _c.forfeit) === true) {\n    if (stored.opponent1) stored.opponent1.forfeit = true;\n    if (stored.opponent2) stored.opponent2.result = 'win';else stored.opponent2 = {\n      id: null,\n      result: 'win'\n    };\n  }\n  if (((_d = match.opponent2) === null || _d === void 0 ? void 0 : _d.forfeit) === true) {\n    if (stored.opponent2) stored.opponent2.forfeit = true;\n    if (stored.opponent1) stored.opponent1.result = 'win';else stored.opponent1 = {\n      id: null,\n      result: 'win'\n    };\n  }\n}\nexports.setForfeits = setForfeits;\n/**\n * Indicates if a seeding is filled with participants' IDs.\n *\n * @param seeding The seeding.\n */\nfunction isSeedingWithIds(seeding) {\n  return seeding.some(value => typeof value === 'number');\n}\nexports.isSeedingWithIds = isSeedingWithIds;\n/**\n * Extracts participants from a seeding, without the BYEs.\n *\n * @param tournamentId ID of the tournament.\n * @param seeding The seeding (no IDs).\n */\nfunction extractParticipantsFromSeeding(tournamentId, seeding) {\n  const withoutByes = seeding.filter(name => name !== null);\n  const participants = withoutByes.map(item => {\n    if (typeof item === 'string') {\n      return {\n        tournament_id: tournamentId,\n        name: item\n      };\n    }\n    return {\n      ...item,\n      tournament_id: tournamentId,\n      name: item.name\n    };\n  });\n  return participants;\n}\nexports.extractParticipantsFromSeeding = extractParticipantsFromSeeding;\n/**\n * Returns participant slots mapped to the instances stored in the database thanks to their name.\n *\n * @param seeding The seeding.\n * @param database The participants stored in the database.\n * @param positions An optional list of positions (seeds) for a manual ordering.\n */\nfunction mapParticipantsNamesToDatabase(seeding, database, positions) {\n  return mapParticipantsToDatabase('name', seeding, database, positions);\n}\nexports.mapParticipantsNamesToDatabase = mapParticipantsNamesToDatabase;\n/**\n * Returns participant slots mapped to the instances stored in the database thanks to their id.\n *\n * @param seeding The seeding.\n * @param database The participants stored in the database.\n * @param positions An optional list of positions (seeds) for a manual ordering.\n */\nfunction mapParticipantsIdsToDatabase(seeding, database, positions) {\n  return mapParticipantsToDatabase('id', seeding, database, positions);\n}\nexports.mapParticipantsIdsToDatabase = mapParticipantsIdsToDatabase;\n/**\n * Returns participant slots mapped to the instances stored in the database thanks to a property of theirs.\n *\n * @param prop The property to search participants with.\n * @param seeding The seeding.\n * @param database The participants stored in the database.\n * @param positions An optional list of positions (seeds) for a manual ordering.\n */\nfunction mapParticipantsToDatabase(prop, seeding, database, positions) {\n  const slots = seeding.map((slot, i) => {\n    if (slot === null) return null; // BYE.\n    const found = database.find(participant => typeof slot === 'object' ? participant[prop] === slot[prop] : participant[prop] === slot);\n    if (!found) throw Error(`Participant ${prop} not found in database.`);\n    return {\n      id: found.id,\n      position: i + 1\n    };\n  });\n  if (!positions) return slots;\n  if (positions.length !== slots.length) throw Error('Not enough seeds in at least one group of the manual ordering.');\n  return positions.map(position => slots[position - 1]); // Because `position` is `i + 1`.\n}\nexports.mapParticipantsToDatabase = mapParticipantsToDatabase;\n/**\n * Converts a list of matches to a seeding.\n *\n * @param matches The input matches.\n */\nfunction convertMatchesToSeeding(matches) {\n  const flattened = [].concat(...matches.map(match => [match.opponent1, match.opponent2]));\n  return sortSeeding(flattened);\n}\nexports.convertMatchesToSeeding = convertMatchesToSeeding;\n/**\n * Converts a list of slots to an input seeding.\n *\n * @param slots The slots to convert.\n */\nfunction convertSlotsToSeeding(slots) {\n  return slots.map(slot => {\n    if (slot === null || slot.id === null) return null; // BYE or TBD.\n    return slot.id; // Let's return the ID instead of the name to be sure we keep the same reference.\n  });\n}\nexports.convertSlotsToSeeding = convertSlotsToSeeding;\n/**\n * Sorts the seeding with the BYEs in the correct position.\n *\n * @param slots A list of slots to sort.\n */\nfunction sortSeeding(slots) {\n  const withoutByes = slots.filter(v => v !== null);\n  // a and b are not null because of the filter.\n  // The slots are from seeding slots, thus they have a position.\n  withoutByes.sort((a, b) => a.position - b.position);\n  if (withoutByes.length === slots.length) return withoutByes;\n  // Same for v and position.\n  const placed = Object.fromEntries(withoutByes.map(v => [v.position - 1, v]));\n  const sortedWithByes = Array.from({\n    length: slots.length\n  }, (_, i) => placed[i] || null);\n  return sortedWithByes;\n}\nexports.sortSeeding = sortSeeding;\n/**\n * Returns only the non null elements.\n *\n * @param array The array to process.\n */\nfunction getNonNull(array) {\n  // Use a TS type guard to exclude null from the resulting type.\n  const nonNull = array.filter(element => element !== null);\n  return nonNull;\n}\nexports.getNonNull = getNonNull;\n/**\n * Returns a list of objects which have unique values of a specific key.\n *\n * @param array The array to process.\n * @param key The key to filter by.\n */\nfunction uniqueBy(array, key) {\n  const seen = new Set();\n  return array.filter(item => {\n    const value = key(item);\n    if (!value) return true;\n    if (seen.has(value)) return false;\n    seen.add(value);\n    return true;\n  });\n}\nexports.uniqueBy = uniqueBy;\n/**\n * Indicates whether the loser bracket round is major.\n *\n * @param roundNumber Number of the round.\n */\nfunction isMajorRound(roundNumber) {\n  return roundNumber % 2 === 1;\n}\nexports.isMajorRound = isMajorRound;\n/**\n * Indicates whether the loser bracket round is minor.\n *\n * @param roundNumber Number of the round.\n */\nfunction isMinorRound(roundNumber) {\n  return !isMajorRound(roundNumber);\n}\nexports.isMinorRound = isMinorRound;\n/**\n * Makes the transition to a major round for duels of the previous round. The duel count is divided by 2.\n *\n * @param previousDuels The previous duels to transition from.\n */\nfunction transitionToMajor(previousDuels) {\n  const currentDuelCount = previousDuels.length / 2;\n  const currentDuels = [];\n  for (let duelIndex = 0; duelIndex < currentDuelCount; duelIndex++) {\n    const prevDuelId = duelIndex * 2;\n    currentDuels.push([byeWinner(previousDuels[prevDuelId]), byeWinner(previousDuels[prevDuelId + 1])]);\n  }\n  return currentDuels;\n}\nexports.transitionToMajor = transitionToMajor;\n/**\n * Makes the transition to a minor round for duels of the previous round. The duel count stays the same.\n *\n * @param previousDuels The previous duels to transition from.\n * @param losers Losers from the previous major round.\n * @param method The ordering method for the losers.\n */\nfunction transitionToMinor(previousDuels, losers, method) {\n  const orderedLosers = method ? ordering_1.ordering[method](losers) : losers;\n  const currentDuelCount = previousDuels.length;\n  const currentDuels = [];\n  for (let duelIndex = 0; duelIndex < currentDuelCount; duelIndex++) {\n    const prevDuelId = duelIndex;\n    currentDuels.push([orderedLosers[prevDuelId], byeWinner(previousDuels[prevDuelId])]);\n  }\n  return currentDuels;\n}\nexports.transitionToMinor = transitionToMinor;\n/**\n * Sets the parent match to a completed status if all its child games are completed.\n *\n * @param parent The partial parent match to update.\n * @param childCount Child count of this parent match.\n * @param inRoundRobin Indicates whether the parent match is in a round-robin stage.\n */\nfunction setParentMatchCompleted(parent, childCount, inRoundRobin) {\n  var _a, _b;\n  if (((_a = parent.opponent1) === null || _a === void 0 ? void 0 : _a.score) === undefined || ((_b = parent.opponent2) === null || _b === void 0 ? void 0 : _b.score) === undefined) throw Error('Either opponent1, opponent2 or their scores are falsy.');\n  const minToWin = minScoreToWinBestOfX(childCount);\n  if (parent.opponent1.score >= minToWin) {\n    parent.opponent1.result = 'win';\n    return;\n  }\n  if (parent.opponent2.score >= minToWin) {\n    parent.opponent2.result = 'win';\n    return;\n  }\n  if (parent.opponent1.score === parent.opponent2.score && parent.opponent1.score + parent.opponent2.score > childCount - 1) {\n    if (inRoundRobin) {\n      parent.opponent1.result = 'draw';\n      parent.opponent2.result = 'draw';\n      return;\n    }\n    throw Error('Match games result in a tie for the parent match.');\n  }\n}\nexports.setParentMatchCompleted = setParentMatchCompleted;\n/**\n * Returns a parent match results based on its child games scores.\n *\n * @param storedParent The parent match stored in the database.\n * @param scores The scores of the match child games.\n */\nfunction getParentMatchResults(storedParent, scores) {\n  return {\n    opponent1: {\n      id: storedParent.opponent1 && storedParent.opponent1.id,\n      score: scores.opponent1\n    },\n    opponent2: {\n      id: storedParent.opponent2 && storedParent.opponent2.id,\n      score: scores.opponent2\n    }\n  };\n}\nexports.getParentMatchResults = getParentMatchResults;\n/**\n * Gets the values which need to be updated in a match when it's updated on insertion.\n *\n * @param match The up to date match.\n * @param existing The base match.\n * @param enableByes Whether to use BYEs or TBDs for `null` values in an input seeding.\n */\nfunction getUpdatedMatchResults(match, existing, enableByes) {\n  return {\n    ...existing,\n    ...match,\n    ...(enableByes ? {\n      opponent1: match.opponent1 === null ? null : {\n        ...existing.opponent1,\n        ...match.opponent1\n      },\n      opponent2: match.opponent2 === null ? null : {\n        ...existing.opponent2,\n        ...match.opponent2\n      }\n    } : {\n      opponent1: match.opponent1 === null ? {\n        id: null\n      } : {\n        ...existing.opponent1,\n        ...match.opponent1\n      },\n      opponent2: match.opponent2 === null ? {\n        id: null\n      } : {\n        ...existing.opponent2,\n        ...match.opponent2\n      }\n    })\n  };\n}\nexports.getUpdatedMatchResults = getUpdatedMatchResults;\n/**\n * Calculates the score of a parent match based on its child games.\n *\n * @param games The child games to process.\n */\nfunction getChildGamesResults(games) {\n  const scores = {\n    opponent1: 0,\n    opponent2: 0\n  };\n  for (const game of games) {\n    const result = getMatchResult(game);\n    if (result === 'opponent1') scores.opponent1++;else if (result === 'opponent2') scores.opponent2++;\n  }\n  return scores;\n}\nexports.getChildGamesResults = getChildGamesResults;\n/**\n * Gets the default list of seeds for a round's matches.\n *\n * @param inLoserBracket Whether the match is in the loser bracket.\n * @param roundNumber The number of the current round.\n * @param roundCountLB The count of rounds in loser bracket.\n * @param matchCount The count of matches in the round.\n */\nfunction getSeeds(inLoserBracket, roundNumber, roundCountLB, matchCount) {\n  const seedCount = getSeedCount(inLoserBracket, roundNumber, roundCountLB, matchCount);\n  return Array.from({\n    length: seedCount\n  }, (_, i) => i + 1);\n}\nexports.getSeeds = getSeeds;\n/**\n * Gets the number of seeds for a round's matches.\n *\n * @param inLoserBracket Whether the match is in the loser bracket.\n * @param roundNumber The number of the current round.\n * @param roundCountLB The count of rounds in loser bracket.\n * @param matchCount The count of matches in the round.\n */\nfunction getSeedCount(inLoserBracket, roundNumber, roundCountLB, matchCount) {\n  ensureOrderingSupported(inLoserBracket, roundNumber, roundCountLB);\n  return roundNumber === 1 ? matchCount * 2 :\n  // Two per match for upper or lower bracket round 1.\n  matchCount; // One per match for loser bracket minor rounds.\n}\nexports.getSeedCount = getSeedCount;\n/**\n * Throws if the ordering is not supported on the given round number.\n *\n * @param inLoserBracket Whether the match is in the loser bracket.\n * @param roundNumber The number of the round.\n * @param roundCountLB The count of rounds in loser bracket.\n */\nfunction ensureOrderingSupported(inLoserBracket, roundNumber, roundCountLB) {\n  if (inLoserBracket && !isOrderingSupportedLoserBracket(roundNumber, roundCountLB)) throw Error('This round does not support ordering.');\n  if (!inLoserBracket && !isOrderingSupportedUpperBracket(roundNumber)) throw Error('This round does not support ordering.');\n}\nexports.ensureOrderingSupported = ensureOrderingSupported;\n/**\n * Indicates whether the ordering is supported in upper bracket, given the round number.\n *\n * @param roundNumber The number of the round.\n */\nfunction isOrderingSupportedUpperBracket(roundNumber) {\n  return roundNumber === 1;\n}\nexports.isOrderingSupportedUpperBracket = isOrderingSupportedUpperBracket;\n/**\n * Indicates whether the ordering is supported in loser bracket, given the round number.\n *\n * @param roundNumber The number of the round.\n * @param roundCount The count of rounds.\n */\nfunction isOrderingSupportedLoserBracket(roundNumber, roundCount) {\n  return roundNumber === 1 || isMinorRound(roundNumber) && roundNumber < roundCount;\n}\nexports.isOrderingSupportedLoserBracket = isOrderingSupportedLoserBracket;\n/**\n * Returns the number of rounds an upper bracket has given the number of participants in the stage.\n *\n * @param participantCount The number of participants in the stage.\n */\nfunction getUpperBracketRoundCount(participantCount) {\n  return Math.log2(participantCount);\n}\nexports.getUpperBracketRoundCount = getUpperBracketRoundCount;\n/**\n * Returns the count of round pairs (major & minor) in a loser bracket.\n *\n * @param participantCount The number of participants in the stage.\n */\nfunction getRoundPairCount(participantCount) {\n  return getUpperBracketRoundCount(participantCount) - 1;\n}\nexports.getRoundPairCount = getRoundPairCount;\n/**\n * Determines whether a double elimination stage is really necessary.\n *\n * If the size is only two (less is impossible), then a lower bracket and a grand final are not necessary.\n *\n * @param participantCount The number of participants in the stage.\n */\nfunction isDoubleEliminationNecessary(participantCount) {\n  return participantCount > 2;\n}\nexports.isDoubleEliminationNecessary = isDoubleEliminationNecessary;\n/**\n * Returns the real (because of loser ordering) number of a match in a loser bracket.\n *\n * @param participantCount The number of participants in a stage.\n * @param roundNumber Number of the round.\n * @param matchNumber Number of the match.\n * @param method The method used for the round.\n */\nfunction findLoserMatchNumber(participantCount, roundNumber, matchNumber, method) {\n  const loserCount = getLoserCountFromWbForLbRound(participantCount, roundNumber);\n  const losers = Array.from({\n    length: loserCount\n  }, (_, i) => i + 1);\n  const ordered = method ? ordering_1.ordering[method](losers) : losers;\n  const matchNumberLB = ordered.indexOf(matchNumber) + 1;\n  // For LB round 1, the list of losers is spread over the matches 2 by 2.\n  if (roundNumber === 1) return Math.ceil(matchNumberLB / 2);\n  return matchNumberLB;\n}\nexports.findLoserMatchNumber = findLoserMatchNumber;\n/**\n * Returns the count of matches in a round of a loser bracket.\n *\n * @param participantCount The number of participants in a stage.\n * @param roundNumber Number of the round.\n */\nfunction getLoserRoundMatchCount(participantCount, roundNumber) {\n  const roundPairIndex = Math.ceil(roundNumber / 2) - 1;\n  const roundPairCount = getRoundPairCount(participantCount);\n  const matchCount = Math.pow(2, roundPairCount - roundPairIndex - 1);\n  if (roundNumber === 0) throw Error('Round number must start at 1.');\n  if (matchCount < 1) throw Error(`Round number ${roundNumber} is too big for a loser bracket in a stage of ${participantCount} participants.`);\n  return matchCount;\n}\nexports.getLoserRoundMatchCount = getLoserRoundMatchCount;\n/**\n * Returns the count of losers coming from the winner bracket in a round of loser bracket.\n *\n * @param participantCount The number of participants in the stage.\n * @param roundNumber Number of the round.\n */\nfunction getLoserCountFromWbForLbRound(participantCount, roundNumber) {\n  const matchCount = getLoserRoundMatchCount(participantCount, roundNumber);\n  // Two per match for LB round 1 (losers coming from WB round 1).\n  if (roundNumber === 1) return matchCount * 2;\n  return matchCount; // One per match for LB minor rounds.\n}\nexports.getLoserCountFromWbForLbRound = getLoserCountFromWbForLbRound;\n/**\n * Returns the ordering method of a round of a loser bracket.\n *\n * @param seedOrdering The list of seed orderings.\n * @param roundNumber Number of the round.\n */\nfunction getLoserOrdering(seedOrdering, roundNumber) {\n  const orderingIndex = 1 + Math.floor(roundNumber / 2);\n  return seedOrdering[orderingIndex];\n}\nexports.getLoserOrdering = getLoserOrdering;\n/**\n * Returns the number of rounds a lower bracket has given the number of participants in a double elimination stage.\n *\n * @param participantCount The number of participants in the stage.\n */\nfunction getLowerBracketRoundCount(participantCount) {\n  const roundPairCount = getRoundPairCount(participantCount);\n  return roundPairCount * 2;\n}\nexports.getLowerBracketRoundCount = getLowerBracketRoundCount;\n/**\n * Returns the match number of the corresponding match in the next round by dividing by two.\n *\n * @param matchNumber The current match number.\n */\nfunction getDiagonalMatchNumber(matchNumber) {\n  return Math.ceil(matchNumber / 2);\n}\nexports.getDiagonalMatchNumber = getDiagonalMatchNumber;\n/**\n * Returns the nearest power of two **greater than** or equal to the given number.\n *\n * @param input The input number.\n */\nfunction getNearestPowerOfTwo(input) {\n  return Math.pow(2, Math.ceil(Math.log2(input)));\n}\nexports.getNearestPowerOfTwo = getNearestPowerOfTwo;\n/**\n * Returns the minimum score a participant must have to win a Best Of X series match.\n *\n * @param x The count of child games in the series.\n */\nfunction minScoreToWinBestOfX(x) {\n  return (x + 1) / 2;\n}\nexports.minScoreToWinBestOfX = minScoreToWinBestOfX;\n/**\n * Checks if a stage is a round-robin stage.\n *\n * @param stage The stage to check.\n */\nfunction isRoundRobin(stage) {\n  return stage.type === 'round_robin';\n}\nexports.isRoundRobin = isRoundRobin;\n/**\n * Throws if a stage is round-robin.\n *\n * @param stage The stage to check.\n */\nfunction ensureNotRoundRobin(stage) {\n  const inRoundRobin = isRoundRobin(stage);\n  if (inRoundRobin) throw Error('Impossible to update ordering in a round-robin stage.');\n}\nexports.ensureNotRoundRobin = ensureNotRoundRobin;\n// TODO: delete this helper in a future release.\n/**\n * Checks if a round is completed based on its matches.\n *\n * @param roundMatches Matches of the round.\n * @deprecated This is both functionally and semantically incorrect because:\n * 1. A match could be completed because of BYEs.\n * 2. You could totally give a list of matches from different rounds to this function, and it wouldn't complain\n *    although the result will **not** tell you whether a _round_ is completed.\n *\n * Please do something like `matches.every(m => isMatchCompleted(m))` instead.\n */\nfunction isRoundCompleted(roundMatches) {\n  return roundMatches.every(match => match.status >= brackets_model_1.Status.Completed);\n}\nexports.isRoundCompleted = isRoundCompleted;\n/**\n * Checks if a group is a winner bracket.\n *\n * It's not always the opposite of `inLoserBracket()`: it could be the only bracket of a single elimination stage.\n *\n * @param stageType Type of the stage.\n * @param groupNumber Number of the group.\n */\nfunction isWinnerBracket(stageType, groupNumber) {\n  return stageType === 'double_elimination' && groupNumber === 1;\n}\nexports.isWinnerBracket = isWinnerBracket;\n/**\n * Checks if a group is a loser bracket.\n *\n * @param stageType Type of the stage.\n * @param groupNumber Number of the group.\n */\nfunction isLoserBracket(stageType, groupNumber) {\n  return stageType === 'double_elimination' && groupNumber === 2;\n}\nexports.isLoserBracket = isLoserBracket;\n/**\n * Checks if a group is a final group (consolation final or grand final).\n *\n * @param stageType Type of the stage.\n * @param groupNumber Number of the group.\n */\nfunction isFinalGroup(stageType, groupNumber) {\n  return stageType === 'single_elimination' && groupNumber === 2 || stageType === 'double_elimination' && groupNumber === 3;\n}\nexports.isFinalGroup = isFinalGroup;\n/**\n * Returns the type of group the match is located into.\n *\n * @param stageType Type of the stage.\n * @param groupNumber Number of the group.\n */\nfunction getMatchLocation(stageType, groupNumber) {\n  if (isWinnerBracket(stageType, groupNumber)) return 'winner_bracket';\n  if (isLoserBracket(stageType, groupNumber)) return 'loser_bracket';\n  if (isFinalGroup(stageType, groupNumber)) return 'final_group';\n  return 'single_bracket';\n}\nexports.getMatchLocation = getMatchLocation;\n/**\n * Returns the fraction of final for the current round (e.g. `1/2` for semi finals or `1/4` for quarter finals).\n *\n * @param roundNumber Number of the current round.\n * @param roundCount Count of rounds.\n */\nfunction getFractionOfFinal(roundNumber, roundCount) {\n  if (roundNumber > roundCount) throw Error(`There are more rounds than possible. ${JSON.stringify({\n    roundNumber,\n    roundCount\n  })}`);\n  const denominator = Math.pow(2, roundCount - roundNumber);\n  return 1 / denominator;\n}\nexports.getFractionOfFinal = getFractionOfFinal;","map":{"version":3,"names":["brackets_model_1","require","ordering_1","isDefined","value","undefined","exports","splitBy","objects","key","map","obj","commonValue","push","Object","values","splitByParity","array","even","filter","_","i","odd","makeRoundRobinMatches","participants","mode","distribution","makeRoundRobinDistribution","symmetry","round","reverse","n","length","n1","roundCount","matchPerRound","rounds","roundId","matches","matchId","opponentsIds","assertRoundRobin","input","output","Math","floor","Error","every","checkAllOpponents","fromEntries","element","Set","checkUnique","match","has","add","makeGroups","elements","groupCount","groupSize","ceil","result","balanceByes","seeding","participantCount","v","getNearestPowerOfTwo","flat","flatMap","setArraySize","nonNullCount","nullCount","againstEachOther","slice","againstNull","normalizeIds","data","mappings","participant","makeNormalizedIdMapping","stage","group","match_game","id","stage_id","group_id","round_id","opponent1","normalizeParticipant","opponent2","parent_id","currentId","reduce","acc","current","mapping","placeholder","Array","from","makePairs","ensureEvenSized","ensureNoDuplicates","nonNull","getNonNull","unique","item","index","stringifiedItem","JSON","stringify","findIndex","ensureEquallySized","left","right","fixSeeding","isPowerOfTwo","number","Number","isInteger","log2","ensureValidSize","stageType","ensureNotTied","scores","convertTBDtoBYE","slot","toResult","toResultWithPosition","position","getWinner","winnerSide","getMatchResult","getLoser","getOtherSide","byeWinner","opponents","byeWinnerToGrandFinal","winner","byeLoser","isMatchCompleted","isMatchDrawCompleted","_a","forfeit","_b","findPosition","isParticipantInMatch","participantId","some","m","getSide","matchNumber","side","isMatchPending","isMatchStarted","score","isMatchByeCompleted","isMatchForfeitCompleted","isMatchResultCompleted","isMatchOngoing","Status","Ready","Running","includes","status","isMatchStale","Completed","isMatchWinCompleted","_c","_d","isMatchUpdateLocked","Locked","Waiting","Archived","isMatchParticipantLocked","hasBye","getMatchStatus","arg","isArray","setMatchResults","stored","inRoundRobin","handleGivenStatus","completed","currentlyCompleted","setExtraFields","handleOpponentsInversion","statusChanged","setScores","setCompleted","resultChanged","resetMatchResults","partialAssign","target","update","ignoredKeys","retainedKeys","keys","forEach","ignoredOpponentKeys","getOpponentId","opponent","getOriginPosition","getLosers","losers","currentRound","roundIndex","loser","findParticipant","makeFinalStandings","grouped","standings","rank","name","getGrandFinalDecisiveMatch","type","find","getNextSide","roundNumber","matchLocation","getNextSideLoserBracket","nextMatch","getNextSideConsolationFinalDoubleElimination","isMajorRound","setNextOpponent","nextSide","currentSide","resetNextOpponent","id1","id2","storedId1","storedId2","invertOpponents","oldStatus","getInferredResult","setResults","setForfeits","check","change","isSeedingWithIds","extractParticipantsFromSeeding","tournamentId","withoutByes","tournament_id","mapParticipantsNamesToDatabase","database","positions","mapParticipantsToDatabase","mapParticipantsIdsToDatabase","prop","slots","found","convertMatchesToSeeding","flattened","concat","sortSeeding","convertSlotsToSeeding","sort","a","b","placed","sortedWithByes","uniqueBy","seen","isMinorRound","transitionToMajor","previousDuels","currentDuelCount","currentDuels","duelIndex","prevDuelId","transitionToMinor","method","orderedLosers","ordering","setParentMatchCompleted","parent","childCount","minToWin","minScoreToWinBestOfX","getParentMatchResults","storedParent","getUpdatedMatchResults","existing","enableByes","getChildGamesResults","games","game","getSeeds","inLoserBracket","roundCountLB","matchCount","seedCount","getSeedCount","ensureOrderingSupported","isOrderingSupportedLoserBracket","isOrderingSupportedUpperBracket","getUpperBracketRoundCount","getRoundPairCount","isDoubleEliminationNecessary","findLoserMatchNumber","loserCount","getLoserCountFromWbForLbRound","ordered","matchNumberLB","indexOf","getLoserRoundMatchCount","roundPairIndex","roundPairCount","pow","getLoserOrdering","seedOrdering","orderingIndex","getLowerBracketRoundCount","getDiagonalMatchNumber","x","isRoundRobin","ensureNotRoundRobin","isRoundCompleted","roundMatches","isWinnerBracket","groupNumber","isLoserBracket","isFinalGroup","getMatchLocation","getFractionOfFinal","denominator"],"sources":["../src/helpers.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}