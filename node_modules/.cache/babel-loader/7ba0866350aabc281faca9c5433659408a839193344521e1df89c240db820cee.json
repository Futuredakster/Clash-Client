{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Get = void 0;\nconst brackets_model_1 = require(\"brackets-model\");\nconst getter_1 = require(\"./base/getter\");\nconst helpers = require(\"./helpers\");\nclass Get extends getter_1.BaseGetter {\n  /**\n   * Returns the data needed to display a stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async stageData(stageId) {\n    const stageData = await this.getStageSpecificData(stageId);\n    const participants = await this.storage.select('participant', {\n      tournament_id: stageData.stage.tournament_id\n    });\n    if (!participants) throw Error('Error getting participants.');\n    return {\n      stage: [stageData.stage],\n      group: stageData.groups,\n      round: stageData.rounds,\n      match: stageData.matches,\n      match_game: stageData.matchGames,\n      participant: participants\n    };\n  }\n  /**\n   * Returns the data needed to display a whole tournament with all its stages.\n   *\n   * @param tournamentId ID of the tournament.\n   */\n  async tournamentData(tournamentId) {\n    const stages = await this.storage.select('stage', {\n      tournament_id: tournamentId\n    });\n    if (!stages) throw Error('Error getting stages.');\n    const stagesData = await Promise.all(stages.map(stage => this.getStageSpecificData(stage.id)));\n    const participants = await this.storage.select('participant', {\n      tournament_id: tournamentId\n    });\n    if (!participants) throw Error('Error getting participants.');\n    return {\n      stage: stages,\n      group: stagesData.reduce((acc, data) => [...acc, ...data.groups], []),\n      round: stagesData.reduce((acc, data) => [...acc, ...data.rounds], []),\n      match: stagesData.reduce((acc, data) => [...acc, ...data.matches], []),\n      match_game: stagesData.reduce((acc, data) => [...acc, ...data.matchGames], []),\n      participant: participants\n    };\n  }\n  /**\n   * Returns the match games associated to a list of matches.\n   *\n   * @param matches A list of matches.\n   */\n  async matchGames(matches) {\n    const parentMatches = matches.filter(match => match.child_count > 0);\n    const matchGamesQueries = await Promise.all(parentMatches.map(match => this.storage.select('match_game', {\n      parent_id: match.id\n    })));\n    if (matchGamesQueries.some(game => game === null)) throw Error('Error getting match games.');\n    return helpers.getNonNull(matchGamesQueries).flat();\n  }\n  /**\n   * Returns the stage that is not completed yet, because of uncompleted matches.\n   * If all matches are completed in this tournament, there is no \"current stage\", so `null` is returned.\n   *\n   * @param tournamentId ID of the tournament.\n   */\n  async currentStage(tournamentId) {\n    const stages = await this.storage.select('stage', {\n      tournament_id: tournamentId\n    });\n    if (!stages) throw Error('Error getting stages.');\n    for (const stage of stages) {\n      const matches = await this.storage.select('match', {\n        stage_id: stage.id\n      });\n      if (!matches) throw Error('Error getting matches.');\n      if (matches.every(match => match.status >= brackets_model_1.Status.Completed)) continue;\n      return stage;\n    }\n    return null;\n  }\n  /**\n   * Returns the round that is not completed yet, because of uncompleted matches.\n   * If all matches are completed in this stage of a tournament, there is no \"current round\", so `null` is returned.\n   *\n   * Note: The consolation final of single elimination and the grand final of double elimination will be in a different `Group`.\n   *\n   * @param stageId ID of the stage.\n   * @example\n   * If you don't know the stage id, you can first get the current stage.\n   * ```js\n   * const tournamentId = 3;\n   * const currentStage = await manager.get.currentStage(tournamentId);\n   * const currentRound = await manager.get.currentRound(currentStage.id);\n   * ```\n   */\n  async currentRound(stageId) {\n    const matches = await this.storage.select('match', {\n      stage_id: stageId\n    });\n    if (!matches) throw Error('Error getting matches.');\n    const matchesByRound = helpers.splitBy(matches, 'round_id');\n    for (const roundMatches of matchesByRound) {\n      if (roundMatches.every(match => match.status >= brackets_model_1.Status.Completed)) continue;\n      const round = await this.storage.select('round', roundMatches[0].round_id);\n      if (!round) throw Error('Round not found.');\n      return round;\n    }\n    return null;\n  }\n  /**\n   * Returns the matches that can currently be played in parallel.\n   * If the stage doesn't contain any, an empty array is returned.\n   *\n   * Note:\n   * - Returned matches are ongoing (i.e. ready or running).\n   * - Returned matches can be from different rounds.\n   *\n   * @param stageId ID of the stage.\n   * @example\n   * If you don't know the stage id, you can first get the current stage.\n   * ```js\n   * const tournamentId = 3;\n   * const currentStage = await manager.get.currentStage(tournamentId);\n   * const currentMatches = await manager.get.currentMatches(currentStage.id);\n   * ```\n   */\n  async currentMatches(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    // TODO: Implement this for all stage types.\n    // - For round robin, 1 round per group can be played in parallel at their own pace.\n    // - For double elimination, 1 round per bracket (upper and lower) can be played in parallel at their own pace.\n    if (stage.type !== 'single_elimination') throw Error('Not implemented for round robin and double elimination. Ask if needed.');\n    const matches = await this.storage.select('match', {\n      stage_id: stageId\n    });\n    if (!matches) throw Error('Error getting matches.');\n    const matchesByRound = helpers.splitBy(matches, 'round_id');\n    const roundCount = helpers.getUpperBracketRoundCount(stage.settings.size);\n    // Save multiple queries for `round`.\n    let currentRoundIndex = -1;\n    const currentMatches = [];\n    for (const roundMatches of matchesByRound) {\n      currentRoundIndex++;\n      if (stage.settings.consolationFinal && currentRoundIndex === roundCount - 1) {\n        // We are on the final of the single elimination.\n        const [final] = roundMatches;\n        const [consolationFinal] = matchesByRound[currentRoundIndex + 1];\n        const finals = [final, consolationFinal];\n        if (finals.every(match => !helpers.isMatchOngoing(match))) return [];\n        return finals.filter(match => helpers.isMatchOngoing(match));\n      }\n      if (roundMatches.every(match => !helpers.isMatchOngoing(match))) continue;\n      currentMatches.push(...roundMatches.filter(match => helpers.isMatchOngoing(match)));\n    }\n    return currentMatches;\n  }\n  /**\n   * Returns the seeding of a stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async seeding(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    const pickRelevantProps = slot => {\n      if (slot === null) return null;\n      const {\n        id,\n        position\n      } = slot;\n      return {\n        id,\n        position\n      };\n    };\n    if (stage.type === 'round_robin') return (await this.roundRobinSeeding(stage)).map(pickRelevantProps);\n    return (await this.eliminationSeeding(stage)).map(pickRelevantProps);\n  }\n  /**\n   * Returns the final standings of a stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async finalStandings(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    switch (stage.type) {\n      case 'round_robin':\n        throw Error('A round-robin stage does not have standings.');\n      case 'single_elimination':\n        return this.singleEliminationStandings(stageId);\n      case 'double_elimination':\n        return this.doubleEliminationStandings(stageId);\n      default:\n        throw Error('Unknown stage type.');\n    }\n  }\n  /**\n   * Returns the seeding of a round-robin stage.\n   *\n   * @param stage The stage.\n   */\n  async roundRobinSeeding(stage) {\n    if (stage.settings.size === undefined) throw Error('The size of the seeding is undefined.');\n    const matches = await this.storage.select('match', {\n      stage_id: stage.id\n    });\n    if (!matches) throw Error('Error getting matches.');\n    const slots = helpers.convertMatchesToSeeding(matches);\n    // BYE vs. BYE matches of a round-robin stage are removed\n    // when the stage is created. We need to add them back temporarily.\n    if (slots.length < stage.settings.size) {\n      const diff = stage.settings.size - slots.length;\n      for (let i = 0; i < diff; i++) slots.push(null);\n    }\n    const unique = helpers.uniqueBy(slots, item => item && item.position);\n    const seeding = helpers.setArraySize(unique, stage.settings.size, null);\n    return seeding;\n  }\n  /**\n   * Returns the seeding of an elimination stage.\n   *\n   * @param stage The stage.\n   */\n  async eliminationSeeding(stage) {\n    const firstRound = await this.storage.selectFirst('round', {\n      stage_id: stage.id,\n      number: 1\n    }, false);\n    if (!firstRound) throw Error('Error getting the first round.');\n    const matches = await this.storage.select('match', {\n      round_id: firstRound.id\n    });\n    if (!matches) throw Error('Error getting matches.');\n    return helpers.convertMatchesToSeeding(matches);\n  }\n  /**\n   * Returns the final standings of a single elimination stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async singleEliminationStandings(stageId) {\n    var _a;\n    const grouped = [];\n    const {\n      stage: stages,\n      group: groups,\n      match: matches,\n      participant: participants\n    } = await this.stageData(stageId);\n    const [stage] = stages;\n    const [singleBracket, finalGroup] = groups;\n    const final = matches.filter(match => match.group_id === singleBracket.id).pop();\n    if (!final) throw Error('Final not found.');\n    // 1st place: Final winner.\n    grouped[0] = [helpers.findParticipant(participants, getFinalWinnerIfDefined(final))];\n    // Rest: every loser in reverse order.\n    const losers = helpers.getLosers(participants, matches.filter(match => match.group_id === singleBracket.id));\n    grouped.push(...losers.reverse());\n    if ((_a = stage.settings) === null || _a === void 0 ? void 0 : _a.consolationFinal) {\n      const consolationFinal = matches.filter(match => match.group_id === finalGroup.id).pop();\n      if (!consolationFinal) throw Error('Consolation final not found.');\n      const consolationFinalWinner = helpers.findParticipant(participants, getFinalWinnerIfDefined(consolationFinal));\n      const consolationFinalLoser = helpers.findParticipant(participants, helpers.getLoser(consolationFinal));\n      // Overwrite semi-final losers with the consolation final results.\n      grouped.splice(2, 1, [consolationFinalWinner], [consolationFinalLoser]);\n    }\n    return helpers.makeFinalStandings(grouped);\n  }\n  /**\n   * Returns the final standings of a double elimination stage.\n   *\n   * @param stageId ID of the stage.\n   */\n  async doubleEliminationStandings(stageId) {\n    var _a, _b;\n    const grouped = [];\n    const {\n      stage: stages,\n      group: groups,\n      match: matches,\n      participant: participants\n    } = await this.stageData(stageId);\n    const [stage] = stages;\n    const [winnerBracket, loserBracket, finalGroup] = groups;\n    if (((_a = stage.settings) === null || _a === void 0 ? void 0 : _a.grandFinal) === 'none') {\n      const finalWB = matches.filter(match => match.group_id === winnerBracket.id).pop();\n      if (!finalWB) throw Error('WB final not found.');\n      const finalLB = matches.filter(match => match.group_id === loserBracket.id).pop();\n      if (!finalLB) throw Error('LB final not found.');\n      // 1st place: WB Final winner.\n      grouped[0] = [helpers.findParticipant(participants, getFinalWinnerIfDefined(finalWB))];\n      // 2nd place: LB Final winner.\n      grouped[1] = [helpers.findParticipant(participants, getFinalWinnerIfDefined(finalLB))];\n    } else {\n      const grandFinalMatches = matches.filter(match => match.group_id === finalGroup.id);\n      const decisiveMatch = helpers.getGrandFinalDecisiveMatch(((_b = stage.settings) === null || _b === void 0 ? void 0 : _b.grandFinal) || 'none', grandFinalMatches);\n      // 1st place: Grand Final winner.\n      grouped[0] = [helpers.findParticipant(participants, getFinalWinnerIfDefined(decisiveMatch))];\n      // 2nd place: Grand Final loser.\n      grouped[1] = [helpers.findParticipant(participants, helpers.getLoser(decisiveMatch))];\n    }\n    // Rest: every loser in reverse order.\n    const losers = helpers.getLosers(participants, matches.filter(match => match.group_id === loserBracket.id));\n    grouped.push(...losers.reverse());\n    return helpers.makeFinalStandings(grouped);\n  }\n  /**\n   * Returns only the data specific to the given stage (without the participants).\n   *\n   * @param stageId ID of the stage.\n   */\n  async getStageSpecificData(stageId) {\n    const stage = await this.storage.select('stage', stageId);\n    if (!stage) throw Error('Stage not found.');\n    const groups = await this.storage.select('group', {\n      stage_id: stageId\n    });\n    if (!groups) throw Error('Error getting groups.');\n    const rounds = await this.storage.select('round', {\n      stage_id: stageId\n    });\n    if (!rounds) throw Error('Error getting rounds.');\n    const matches = await this.storage.select('match', {\n      stage_id: stageId\n    });\n    if (!matches) throw Error('Error getting matches.');\n    const matchGames = await this.matchGames(matches);\n    return {\n      stage,\n      groups,\n      rounds,\n      matches,\n      matchGames\n    };\n  }\n}\nexports.Get = Get;\nconst getFinalWinnerIfDefined = match => {\n  const winner = helpers.getWinner(match);\n  if (!winner) throw Error('The final match does not have a winner.');\n  return winner;\n};","map":{"version":3,"names":["brackets_model_1","require","getter_1","helpers","Get","BaseGetter","stageData","stageId","getStageSpecificData","participants","storage","select","tournament_id","stage","Error","group","groups","round","rounds","match","matches","match_game","matchGames","participant","tournamentData","tournamentId","stages","stagesData","Promise","all","map","id","reduce","acc","data","parentMatches","filter","child_count","matchGamesQueries","parent_id","some","game","getNonNull","flat","currentStage","stage_id","every","status","Status","Completed","currentRound","matchesByRound","splitBy","roundMatches","round_id","currentMatches","type","roundCount","getUpperBracketRoundCount","settings","size","currentRoundIndex","consolationFinal","final","finals","isMatchOngoing","push","seeding","pickRelevantProps","slot","position","roundRobinSeeding","eliminationSeeding","finalStandings","singleEliminationStandings","doubleEliminationStandings","undefined","slots","convertMatchesToSeeding","length","diff","i","unique","uniqueBy","item","setArraySize","firstRound","selectFirst","number","grouped","singleBracket","finalGroup","group_id","pop","findParticipant","getFinalWinnerIfDefined","losers","getLosers","reverse","_a","consolationFinalWinner","consolationFinalLoser","getLoser","splice","makeFinalStandings","winnerBracket","loserBracket","grandFinal","finalWB","finalLB","grandFinalMatches","decisiveMatch","getGrandFinalDecisiveMatch","_b","exports","winner","getWinner"],"sources":["../src/get.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}